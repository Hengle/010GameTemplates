//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: FF16 Texture File
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: *.tex
//  ID Bytes: 54 45 58 20
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

typedef enum<uint>
{
    // 8 bpp
    R8_TYPELESS = 0x10130,
    R8_UNORM = 0x11130,
    A8_UNORM = 0x11131,
    R8_SNORM = 0x13130,
    R8_UINT = 0x14130,
    R8_SINT = 0x15130,

    // 16 bpp
    R16_TYPELESS = 0x20140,
    R16_UNORM = 0x21140,
    R16_SNORM = 0x23140,
    R16_UINT = 0x24140,
    R16_SINT = 0x25140,
    R16_FLOAT = 0x26140,
    D16_UNORM = 0x29140,

    // 8+8 bpp
    R8G8_TYPELESS = 0x30240,
    R8G8_UNORM = 0x31240,
    R8G8_UINT = 0x34240,
    R8G8_SNORM = 0x33240,
    R8G8_SINT = 0x35240,

    // 32 bpp
    R32_TYPELESS = 0x40150,
    R32_UINT = 0x44150,
    R32_SINT = 0x45150,
    R32_FLOAT = 0x46150,
    D32_FLOAT = 0x49150,

    // 16+16 bpp
    R16G16_TYPELESS = 0x50250,
    R16G16_UNORM = 0x51250,
    R16G16_SNORM = 0x53250,
    R16G16_UINT = 0x54250,
    R16G16_SINT = 0x55250,
    R16G16_FLOAT = 0x56250,

    // 11+11+10 bpp
    R11G11B10_FLOAT = 0x76350,

    // 11+10+10+2 bpp
    R10G10B10A2_TYPELESS = 0x80450,
    R10G10B10A2_UNORM = 0x81450,
    R10G10B10A2_UINT = 0x84450,

    // 8+8+8+8 bpp
    R8G8B8A8_TYPELESS = 0xA0450,
    R8G8B8A8_UNORM = 0xA1450,
    R8G8B8A8_UNORM_SRGB = 0xA2450,
    R8G8B8A8_UINT = 0xA4450,
    R8G8B8A8_SNORM = 0xA3450,
    R8G8B8A8_SINT = 0xA5450,

    // 32+32 bpp
    R32G32_TYPELESS = 0xB0260,
    R32G32_FLOAT = 0xB6260,
    R32G32_UINT = 0xB4260,
    R32G32_SINT = 0xB5260,

    // 16+16+16+16 bpp
    R16G16B16A16_TYPELESS = 0xC0460,
    R16G16B16A16_FLOAT = 0xC6460,
    R16G16B16A16_UNORM = 0xC1460,
    R16G16B16A16_UINT = 0xC4460,
    R16G16B16A16_SNORM = 0xC3460,
    R16G16B16A16_SINT = 0xC5460,

    // 32+32+32 bpp
    R32G32B32_TYPELESS = 0xD0380,
    R32G32B32_FLOAT = 0xD6380,
    R32G32B32_UINT = 0xD4380,
    R32G32B32_SINT = 0xD5380,

    // 32+32+32+32 bpp
    R32G32B32A32_TYPELESS = 0xE0470,
    R32G32B32A32_UINT = 0xE4470,
    R32G32B32A32_SINT = 0xE5470,
    R32G32B32A32_FLOAT = 0xE6470,

    // 32+8+24bpp
    R32G8X24_TYPELESS = 0xF0360,
    X32_TYPELESS_G8X24_UINT = 0xF4160,
    R32_FLOAT_X8X24_TYPELESS = 0xF6160,
    D32_FLOAT_S8X24_UINT = 0xF9260,

    // bc1
    BC1_UNORM = 0x107420,
    BC1_UNORM_SRGB = 0x108420,

    // bc2
    BC2_UNORM = 0x117430,
    BC2_UNORM_SRGB = 0x118430,

    // bc3
    BC3_UNORM = 0x127430,
    BC3_UNORM_SRGB = 0x128430,

    // bc4
    BC4_UNORM = 0x137120,
    BC4_SNORM = 0x137121,

    // bc5
    BC5_UNORM = 0x147230,
    BC5_SNORM = 0x147231,

    // bc6
    BC6H_UF16 = 0x157330,
    BC6H_SF16 = 0x157331,

    // bc7
    BC7_UNORM = 0x167430,
    BC7_UNORM_SRGB = 0x168430,
} TexturePixelFormat;

struct
{
    uint Magic <format=hex>;
    byte Version;
    byte Flags; 
    byte Unk;
    byte __pad__;
} Header <bgcolor=cPurple, size=0x08>;

struct
{
    
    byte TextureCount; // this * 0x20
    byte _empty_;
    ushort NumChunks; // this * 0x10 if UnkFlags & 3, or 0x18?
    uint UnkSizeOrOffset1;
    uint UnkSizeOrOffset2;
    uint UnkFlags <format=hex>; // & 3, & 0x10 or 0xF?
    int Empty[4];
} Header2 <size=0x20, bgcolor=cDkRed>;

struct
{
    int Dimension : 2;
    int SignedDistanceField : 1;
    int NoChunks : 1;
    int Bits1_4_USED : 1;
    int Bits1_5_USED : 1;
    byte Bits1_Unk : 2;
    int Bits1_UnkBits : 24 <format=hex>;
    
    TexturePixelFormat Format <format=hex>;
    short MipmapCount;
    short OriginalWidth;
    short OriginalHeight;
    short unk;
    int ChunkOffset <format=hex>;
    int CompressedDataSize <format=hex>;
    uint Color <format=hex>;
    short ChunkIndex;
    short ChunkCount;
} Texture[Header2.TextureCount] <bgcolor=cYellow>;

struct
{
    int CompressedDataOffset <format=hex>;
    int TypeFlags : 2;
    int CompressedChunkSize : 30 <format=hex>;
    int DecompressedChunkSize <format=hex>;
    byte ChunkIndex : 7;
    byte Unk_0x0C_2 : 1;
    byte Unk_0x0D <comment="Used as some sort of index">;
    short _pad_;
} ChunkInfo[Header2.NumChunks] <bgcolor=cBlack>;
