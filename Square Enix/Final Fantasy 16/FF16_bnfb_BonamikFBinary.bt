//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: BNFB Binary
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE! This file is a flatbuffer file
// It is not supposed to be mapped out, but only did to more easily reverse up the original schema
// You should be using the schema defined here if you intend to alter the file:
// https://github.com/Nenkai/FF16Tools/blob/master/FF16Tools.Files.FlatBuffers/BNFB_BonamikFBinary.fbs

typedef struct
{
    float x;
    float y;
} Vec2;


typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;

typedef struct
{
    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
    local int j = 0;
    for (j = 0; j < NumEntries; j++)
    {
        FSeek(startof(Offsets[j]) + Offsets[j]);
        struct
        {
            FlatArkFields fields3;
            
            if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
            {
                FSeek(startof(fields3) + fields3.OffsetTable[1]);
                float F1[3] <bgcolor=cBlue, format=hex>;
            }
            
            if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
            {
                FSeek(startof(fields3) + fields3.OffsetTable[2]);
                float F2[3] <bgcolor=cBlue, format=hex>;
            }
            
            if (exists(fields3.OffsetTable[3]) && fields3.OffsetTable[3])
            {
                FSeek(startof(fields3) + fields3.OffsetTable[3]);
                float F3[3] <bgcolor=cBlue, format=hex>;
            }
            
            if (exists(fields3.OffsetTable[4]) && fields3.OffsetTable[4])
            {
                FSeek(startof(fields3) + fields3.OffsetTable[4]);
                float F4[3] <bgcolor=cBlue, format=hex>;
            }
            
            if (exists(fields3.OffsetTable[5]) && fields3.OffsetTable[5])
            {
                FSeek(startof(fields3) + fields3.OffsetTable[5]);
                float F5 <bgcolor=cBlue, format=hex>;
            }
        } Entry;
    }
} UnkSharedArray;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields fields;
        if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
        {
            FSeek(startof(fields) + fields.OffsetTable[1]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                    
                    if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[1]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            struct
                            {
                                int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                local int j = 0;
                                for (j = 0; j < NumEntries; j++)
                                {
                                    FSeek(startof(Offsets[j]) + Offsets[j]);
                                    struct
                                    {
                                        FlatArkFields fields3;
                                        
                                        if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[1]);
                                            float F1[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[2]);
                                            float F2[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[3]) && fields3.OffsetTable[3])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[3]);
                                            float F3[4] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[4]) && fields3.OffsetTable[4])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[4]);
                                            float F4[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[5]) && fields3.OffsetTable[5])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[5]);
                                            float F5[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[6]) && fields3.OffsetTable[6])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[6]);
                                            float F6[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[7]) && fields3.OffsetTable[7])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[7]);
                                            float F7[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[8]) && fields3.OffsetTable[8])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[8]);
                                            float F8[10] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[9]) && fields3.OffsetTable[9])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[9]);
                                            float F9[10] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[10]) && fields3.OffsetTable[10])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[10]);
                                            float F10[10] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[11]) && fields3.OffsetTable[11])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[11]);
                                            float F11[4] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[12]) && fields3.OffsetTable[12])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[12]);
                                            float F12[3] <bgcolor=cBlue, format=hex>;
                                        }
                                        
                                        if (exists(fields3.OffsetTable[13]) && fields3.OffsetTable[13])
                                        {
                                            FSeek(startof(fields3) + fields3.OffsetTable[13]);
                                            float F13[3] <bgcolor=cBlue, format=hex>;
                                        }
                                    } Entry;
                                }
                            } Array;
                        } F1;
                    }
                    
                    if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[2]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F2;
                    }
                    
                    if (exists(fields2.OffsetTable[3]) && fields2.OffsetTable[3])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[3]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F3;
                    }
                    
                    if (exists(fields2.OffsetTable[4]) && fields2.OffsetTable[4])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[4]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F4;
                    }
                    
                    if (exists(fields2.OffsetTable[5]) && fields2.OffsetTable[5])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[5]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F5;
                    }
                    
                    if (exists(fields2.OffsetTable[6]) && fields2.OffsetTable[6])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[6]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F6;
                    }
                    
                    if (exists(fields2.OffsetTable[7]) && fields2.OffsetTable[7])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[7]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            UnkSharedArray Array;
                        } F7;
                    }
                    
                    if (exists(fields2.OffsetTable[8]) && fields2.OffsetTable[8])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[8]);
                        struct
                        {
                            int DataOffset <format=hex, fgcolor=cRed>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            struct
                            {
                                FlatArkFields fields3;
                                
                                if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                                {
                                    FSeek(startof(fields3) + fields3.OffsetTable[1]);
                                    uint F1[4] <bgcolor=cBlue, format=hex>;
                                }
                                
                                if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
                                {
                                    FSeek(startof(fields3) + fields3.OffsetTable[2]);
                                    uint F2 <bgcolor=cBlue, format=hex>;
                                }
                            } Table;
                        } F8;
                    }
                } Table;
            } F1;
        }
        
        if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
        {
            FSeek(startof(fields) + fields.OffsetTable[2]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                    
                    if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[1]);
                        float F1[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[2]);
                        float F2[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[3]) && fields2.OffsetTable[3])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[3]);
                        float F3[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[4]) && fields2.OffsetTable[4])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[4]);
                        float F4[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[5]) && fields2.OffsetTable[5])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[5]);
                        float F5[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[6]) && fields2.OffsetTable[6])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[6]);
                        float F6[10] <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[7]) && fields2.OffsetTable[7])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[7]);
                        float F7[10] <bgcolor=cBlue, format=hex>;
                    }
                } Table;
            } F2;
        }
        
        if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
        {
            FSeek(startof(fields) + fields.OffsetTable[3]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                    
                    if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[1]);
                        float F1 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[2]);
                        float F2 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[3]) && fields2.OffsetTable[3])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[3]);
                        float F3 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[4]) && fields2.OffsetTable[4])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[4]);
                        uint F4 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[5]) && fields2.OffsetTable[5])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[5]);
                        uint F5 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[6]) && fields2.OffsetTable[6])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[6]);
                        uint F6 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[7]) && fields2.OffsetTable[7])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[7]);
                        float F7 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[8]) && fields2.OffsetTable[8])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[8]);
                        float F8 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[9]) && fields2.OffsetTable[9])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[9]);
                        float F9 <bgcolor=cBlue, format=hex>;
                    }
                } Table;
            } F3;
        }
        
        if (exists(fields.OffsetTable[4]) && fields.OffsetTable[4])
        {
            FSeek(startof(fields) + fields.OffsetTable[4]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                    local int j = 0;
                    for (j = 0; j < NumEntries; j++)
                    {
                        FSeek(startof(Offsets[j]) + Offsets[j]);
                        struct
                        {
                            FlatArkFields fields3;
                            
                            if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                            {
                                FSeek(startof(fields3) + fields3.OffsetTable[1]);
                                float F1 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
                            {
                                FSeek(startof(fields3) + fields3.OffsetTable[2]);
                                float F2 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(fields3.OffsetTable[3]) && fields3.OffsetTable[3])
                            {
                                FSeek(startof(fields3) + fields3.OffsetTable[3]);
                                float F3[3] <bgcolor=cBlue, format=hex>;
                            }
                        } Entry;
                    }
                } Table;
            } F4;
        }
        
        if (exists(fields.OffsetTable[5]) && fields.OffsetTable[5])
        {
            FSeek(startof(fields) + fields.OffsetTable[5]);
            uint F5 <bgcolor=cBlue, format=hex>;
        }
        
        if (exists(fields.OffsetTable[6]) && fields.OffsetTable[6])
        {
            FSeek(startof(fields) + fields.OffsetTable[6]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                    
                    if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[1]);
                        byte F1 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[2]);
                        byte F2 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[3]) && fields2.OffsetTable[3])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[3]);
                        byte F3 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[4]) && fields2.OffsetTable[4])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[4]);
                        byte F4 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[5]) && fields2.OffsetTable[5])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[5]);
                        byte F5 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields2.OffsetTable[6]) && fields2.OffsetTable[6])
                    {
                        FSeek(startof(fields2) + fields2.OffsetTable[6]);
                        byte F6 <bgcolor=cBlue, format=hex>;
                    }

                } Table;
            } F6;
        }
        
        if (exists(fields.OffsetTable[7]) && fields.OffsetTable[7])
        {
            FSeek(startof(fields) + fields.OffsetTable[7]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                    int Values[NumEntries] <format=hex, bgcolor=cBlue>;

                } Table;
            } F7;
        }
    } Table;
} F3;
