//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: HitReaction File
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE! This file is a flatbuffer file
// It is not supposed to be mapped out, but only did to more easily reverse up the original schema
// You should be using the schema defined here if you intend to alter the file:
// https://github.com/Nenkai/FF16Tools/blob/master/FF16Tools.Files.FlatBuffers/HITR_HitReactionBinary.fbs

typedef struct
{
    float x;
    float y;
} Vec2;


typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

typedef struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields fields2;
        
        if (fields2.OffsetTableSize > 8)
            Printf("wat");
            
        if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
        {
            FSeek(startof(fields2) + fields2.OffsetTable[1]);
            short F1 <bgcolor=cBlue, format=hex>;
        }
        
        if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
        {
            FSeek(startof(fields2) + fields2.OffsetTable[2]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields3;
                    
                    if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                    {
                        FSeek(startof(fields3) + fields3.OffsetTable[1]);
                        float F1 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
                    {
                        FSeek(startof(fields3) + fields3.OffsetTable[2]);
                        float F2 <bgcolor=cBlue, format=hex>;
                    }
                    
                    if (exists(fields3.OffsetTable[3]) && fields3.OffsetTable[3])
                    {
                        FSeek(startof(fields3) + fields3.OffsetTable[3]);
                        float F3 <bgcolor=cBlue, format=hex>;
                    }
                } Table;
            } F2;
        }
    } Table;
    
} UnkSharedStruct;

FlatArkHeader Hdr;

if (exists(Hdr.Fields.OffsetTable[1]) && Hdr.Fields.OffsetTable[1])
    Printf("Unk1\n");
    
if (exists(Hdr.Fields.OffsetTable[2]) && Hdr.Fields.OffsetTable[2])
    Printf("Unk2\n");
        
FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
             FSeek(startof(Offsets[j]) + Offsets[j]);
             struct
             {
                FlatArkFields Fields;
            
                if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    uint F1 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[2]);
                    uint F2 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[3]);
                    byte F3 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[4]);
                    byte F4 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[5]);
                    byte F5 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[6]);
                    byte F6 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[7]);
                    byte F7 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[8]);
                    byte F8 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[9]);
                    byte F9 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[10]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            local int j = 0;
                            for (j = 0; j < NumEntries; j++)
                            {
                                 FSeek(startof(Offsets[j]) + Offsets[j]);
                                 struct
                                 {
                                     FlatArkFields Fields;
                                     
                                     if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                        short F1 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                        byte F2 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[3]);
                                        byte F3 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[4]);
                                        if (F3 == 1)
                                        {
                                            struct
                                            {
                                                int DataOffset <format=hex, fgcolor=cRed>;
                                                FSeek(startof(DataOffset) + DataOffset);
                                                
                                                struct
                                                {
                                                    FlatArkFields fields;
                                                    
                                                    if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[1]);
                                                        UnkSharedStruct F1;
                                                    }
                                                    
                                                    if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[2]);
                                                        byte F2 <bgcolor=cBlue, format=hex>;
                                                    }
                                                    
                                                    if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[3]);
                                                        float F3 <bgcolor=cBlue, format=hex>;
                                                    }
                                                } Table;
                                            } F3_Type1;
                                        }
                                        else if (F3 == 2)
                                        {
                                            struct
                                            {
                                                int DataOffset <format=hex, fgcolor=cRed>;
                                                FSeek(startof(DataOffset) + DataOffset);
                                                
                                                struct
                                                {
                                                    FlatArkFields fields;
                                                    
                                                    if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[1]);
                                                        UnkSharedStruct F1;
                                                    }
                                                    
                                                    if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[2]);
                                                        UnkSharedStruct F2;
                                                    }
                                                } Table;
                                            } F3_Type2;
                                        }
                                        else if (F3 == 3)
                                        {
                                            struct
                                            {
                                                int DataOffset <format=hex, fgcolor=cRed>;
                                                FSeek(startof(DataOffset) + DataOffset);
                                                
                                                struct
                                                {
                                                    FlatArkFields fields;
                                                    
                                                    if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[1]);
                                                        UnkSharedStruct F1;
                                                    }
                                                    
                                                    if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                                    {
                                                        FSeek(startof(fields) + fields.OffsetTable[2]);
                                                        byte F2 <bgcolor=cBlue, format=hex>;
                                                    }
                                                } Table;
                                            } F3_Type3;
                                        }
                                    }
                                    
                                    if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[5]);
                                        byte F4 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[6]);
                                        byte F5 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[7]);
                                        byte F6 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[8]);
                                        byte F7 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[9]);
                                        struct
                                        {
                                            int DataOffset <format=hex, fgcolor=cRed>;
                                            FSeek(startof(DataOffset) + DataOffset);
                                            
                                            struct
                                            {
                                                FlatArkFields fields;
                                                
                                                if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[1]);
                                                    float F1 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[2]);
                                                    float F2 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[3]);
                                                    byte F3 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[4]) && fields.OffsetTable[4])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[4]);
                                                    short F4 <bgcolor=cBlue, format=hex>;
                                                }
    
                                            } Table;
                                        } F8;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[10]);
                                        struct
                                        {
                                            int DataOffset <format=hex, fgcolor=cRed>;
                                            FSeek(startof(DataOffset) + DataOffset);
                                            
                                            struct
                                            {
                                                FlatArkFields fields;
                                                
                                                if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[1]);
                                                    float F1 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[2]);
                                                    float F2 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[3]);
                                                    byte F3 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields.OffsetTable[4]) && fields.OffsetTable[4])
                                                {
                                                    FSeek(startof(fields) + fields.OffsetTable[4]);
                                                    short F4 <bgcolor=cBlue, format=hex>;
                                                }
                                            } Table;
                                        } F9;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[11]);
                                        byte F10 <bgcolor=cBlue, format=hex>; // unk array
                                    }
                                    
                                    if (exists(Fields.OffsetTable[12]) && Fields.OffsetTable[12])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[12]);
                                        struct
                                        {
                                            int DataOffset <format=hex, fgcolor=cRed>;
                                            FSeek(startof(DataOffset) + DataOffset);
                                            
                                            int NumValues <bgcolor=cBlue, format=hex>;
                                            int Values[NumValues] <bgcolor=cBlue>;
                                        } F11;
                                    }
                                    
                                    if (exists(Fields.OffsetTable[13]) && Fields.OffsetTable[13])
                                    {
                                        FSeek(startof(Fields) + Fields.OffsetTable[13]);
                                        struct
                                        {
                                            int DataOffset <format=hex, fgcolor=cRed>;
                                            FSeek(startof(DataOffset) + DataOffset);
                                            
                                            struct
                                            {
                                                uint strLen <bgcolor=cYellow>;
                                                char str[strLen] <bgcolor=cYellow>;
                                            } String;
                                        } F12;
                                    }
                                 } Entry;
                            }
                        } Table;
                    } F10;
                }
                
                if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[11]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            local int j = 0;
                            for (j = 0; j < NumEntries; j++)
                            {
                                 FSeek(startof(Offsets[j]) + Offsets[j]);
                                 struct
                                 {
                                     FlatArkFields Fields;
                                     
                                     FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                     uint F1 <bgcolor=cBlue>;
                                     
                                     FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                     uint F2 <bgcolor=cBlue>;
                                 } Entry;
                            } 
                        }Table;
                    } F11;
                }
             } Entry;
        }
    } Table;
} F3;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[4]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
             FSeek(startof(Offsets[j]) + Offsets[j]);
             struct
             {
                FlatArkFields Fields;
                
                if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    short F1 <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[2]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields fields;
                            
                            if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[1]);
                                short F1 <bgcolor=cBlue, format=hex>;
                            }
                        } Table;
                    } F2;
                }
                
                if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[5]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            Vec2 Values[NumEntries] <bgcolor=cBlue>;
                        } Table;
                    } F5;
                }
                
                if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[6]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields fields;
                            
                            if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[1]);
                                float F1 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[2]);
                                float F2 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[3]);
                                byte F3 <bgcolor=cBlue, format=hex>;
                            }
                        } Table;
                    } F6;
                }
                
                if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[7]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields fields;
                            
                            if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[1]);
                                float F1 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                            {
                                FSeek(startof(fields) + fields.OffsetTable[2]);
                                float F2 <bgcolor=cBlue, format=hex>;
                            }
                            
                            if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                            {
                                FSeek(startof(Fields) + Fields.OffsetTable[3]);
                                byte F3 <bgcolor=cBlue, format=hex>;
                            }
                        } Table;
                    } F7;
                }
                
                if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[8]);
                    struct
                    {
                        uint NameOffset <bgcolor=cYellow>;
                        FSeek(startof(NameOffset) + NameOffset);
                        
                        struct
                        {
                            uint strLen <bgcolor=cYellow>;
                            char str[strLen] <bgcolor=cYellow>;
                        } String;
                    } F8;
                }
             } Entry;
        }
    } Table;
} F4;
   
FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[6]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields fields;
        
        if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
        {
            FSeek(startof(fields) + fields.OffsetTable[1]);
            byte F1 <bgcolor=cBlue, format=hex>;
        }
        
        if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
        {
            FSeek(startof(fields) + fields.OffsetTable[2]);
            short F2 <bgcolor=cBlue, format=hex>;
        }
       
    } Table;
} F6;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[7]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
             FSeek(startof(Offsets[j]) + Offsets[j]);
             struct
             {
                 FlatArkFields Fields;
                 
                 if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                 {
                     FSeek(startof(Fields) + Fields.OffsetTable[1]);
                     struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            local int j = 0;
                            for (j = 0; j < NumEntries; j++)
                            {
                                 FSeek(startof(Offsets[j]) + Offsets[j]);
                                 struct
                                 {
                                    FlatArkFields fields;
                                    
                                    if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
                                    {
                                        FSeek(startof(fields) + fields.OffsetTable[1]);
                                        uint F1 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                    {
                                        FSeek(startof(fields) + fields.OffsetTable[2]);
                                        uint F2 <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
                                    {
                                        FSeek(startof(fields) + fields.OffsetTable[3]);
                                        struct
                                        {
                                            int DataOffset <format=hex, fgcolor=cRed>;
                                            FSeek(startof(DataOffset) + DataOffset);
                                            struct
                                            {
                                                FlatArkFields fields2;
                                                
                                                if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                                                {
                                                    FSeek(startof(fields2) + fields2.OffsetTable[1]);
                                                    float F1 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                                                {
                                                    FSeek(startof(fields2) + fields2.OffsetTable[2]);
                                                    float F2 <bgcolor=cBlue, format=hex>;
                                                }
                                                
                                                if (exists(fields2.OffsetTable[3]) && fields2.OffsetTable[3])
                                                {
                                                    FSeek(startof(fields2) + fields2.OffsetTable[3]);
                                                    byte F3 <bgcolor=cBlue, format=hex>;
                                                }
                                            } Table;
                                        } F3;
                                    }
                                 } Entry;
                            }
                        } Table;
                    } F1;
                 }
                 
                 if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                 {
                     FSeek(startof(Fields) + Fields.OffsetTable[2]);
                     byte F2 <bgcolor=cBlue, format=hex>;
                 }
             } Entry;
        }
    } Table;
} F7;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[8]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields fields;
        
        if (exists(fields.OffsetTable[1]) && fields.OffsetTable[1])
        {
            FSeek(startof(fields) + fields.OffsetTable[1]);
            byte F1 <bgcolor=cBlue, format=hex>;
        }
        
        if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
        {
            FSeek(startof(fields) + fields.OffsetTable[2]);
            float F2 <bgcolor=cBlue, format=hex>;
        }
        
        if (exists(fields.OffsetTable[3]) && fields.OffsetTable[3])
        {
            FSeek(startof(fields) + fields.OffsetTable[3]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                } Table;
            } F3;
        }
        
        if (exists(fields.OffsetTable[4]) && fields.OffsetTable[4])
        {
            FSeek(startof(fields) + fields.OffsetTable[4]);
            struct
            {
                int DataOffset <format=hex, fgcolor=cRed>;
                FSeek(startof(DataOffset) + DataOffset);
                
                struct
                {
                    FlatArkFields fields2;
                } Table;
            } F4;
        }
    } Table;
} F8;
