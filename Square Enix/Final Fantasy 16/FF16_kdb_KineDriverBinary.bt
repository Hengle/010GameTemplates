//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: KineDriverBinary FlatBuffer
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE! This file is a flatbuffer file
// It is not supposed to be mapped out, but only did to more easily reverse up the original schema
// You should be using the schema defined here if you intend to alter the file:
// https://github.com/Nenkai/FF16Tools/blob/master/FF16Tools.Files.FlatBuffers/KDB_KineDriverBinary.fbs

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3;

typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

typedef struct
{
    int DataOffset <bgcolor=cBlue, format=hex>;
    FSeek(startof(DataOffset) + DataOffset);
       
    struct
    {                    
        FlatArkFields Fields;
        
        if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
        {
            FSeek(startof(Fields) + Fields.OffsetTable[1]);
            uint Hash <bgcolor=cBlue, format=hex>;
        }
        
        FSeek(startof(Fields) + Fields.OffsetTable[2]);
        struct
        {
           uint NameOffset <bgcolor=cYellow>;
           FSeek(startof(NameOffset) + NameOffset);
           uint strLen <bgcolor=cYellow>;
           char str[strLen] <bgcolor=cYellow>;
        } F2_FieldName;
    } Table;
} HashWithString;

typedef struct
{
    int DataOffset <bgcolor=cBlue, format=hex>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields fields;
        
        FSeek(startof(fields) + fields.OffsetTable[1]);
        HashWithString F1;
        
        if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
        {
            FSeek(startof(fields) + fields.OffsetTable[2]);
            ushort F2 <bgcolor=cBlue>;   
        }
    } Table;
} UnkStringWithUShortStruct;

typedef struct
{
    int DataOffset <bgcolor=cBlue, format=hex>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields Fields;
        
        if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
        {
            FSeek(startof(Fields) + Fields.OffsetTable[1]);
            byte UnkType <bgcolor=cBlue, format=hex>;
        }

        FSeek(startof(Fields) + Fields.OffsetTable[2]);
        HashWithString UnkHashWithString;
    } Table;
} TableWithUnion;
                                                                    
FlatArkHeader Hdr;

if (exists(Hdr.Fields.OffsetTable[1]) && Hdr.Fields.OffsetTable[1])
    Printf("hello\n");
    
if (exists(Hdr.Fields.OffsetTable[2]) && Hdr.Fields.OffsetTable[2])
    Printf("hello\n");
        
FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
             FSeek(startof(Offsets[j]) + Offsets[j]);
             struct
             {
                FlatArkFields Fields;
                
                if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    byte UnionTypeMaybe <bgcolor=cBlue, format=hex>;
                }
                
                FSeek(startof(Fields) + Fields.OffsetTable[2]);
                uint UnionOffset <bgcolor=cBlue, format=hex>;
                
                FSeek(startof(UnionOffset) + UnionOffset);
                struct
                {
                    FlatArkFields Fields;
                    
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    HashWithString F1;
                        
                    if (UnionTypeMaybe == 1)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            struct
                            {
                                int DataOffset <bgcolor=cBlue, format=hex>;
                                FSeek(startof(DataOffset) + DataOffset);
                                
                                struct
                                {
                                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                    local int j = 0;
                                    for (j = 0; j < NumEntries; j++)
                                    {
                                         FSeek(startof(Offsets[j]) + Offsets[j]);
                                         struct
                                         {
                                             FlatArkFields Fields;
                                             
                                             FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                             HashWithString F1;
                                             
                                             FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                             float F2 <bgcolor=cBlue, format=hex>;
                                         } Entry;
                                    }
                                } Table;

                            } F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            TableWithUnion F3;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            Vec3 F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 6)
                            Printf("Type 1 Larger\n");
                    }
                    else if (UnionTypeMaybe == 2)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            struct
                            {
                                int DataOffset <bgcolor=cBlue, format=hex>;
                                FSeek(startof(DataOffset) + DataOffset);
                                
                                struct
                                {
                                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                    local int j = 0;
                                    for (j = 0; j < NumEntries; j++)
                                    {
                                         FSeek(startof(Offsets[j]) + Offsets[j]);
                                         struct
                                         {
                                             FlatArkFields fields;
                                             
                                             FSeek(startof(fields) + fields.OffsetTable[1]);
                                             HashWithString F1;
                                             
                                             if (exists(fields.OffsetTable[2]) && fields.OffsetTable[2])
                                             {
                                                FSeek(startof(fields) + fields.OffsetTable[2]);
                                                float F2 <bgcolor=cBlue, format=hex>;
                                             }
                                         } Entry;
                                    }
                                    
                                    FSeek(FileSize());
                                } Table;
                            } F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            TableWithUnion F3;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            Vec3 F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            Vec3 F6 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            byte F7 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 8)
                            Printf("Type 2 Larger\n");
                    }
                    else if (UnionTypeMaybe == 4)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            Vec3 F3 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            Vec3 F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            TableWithUnion F6;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 7)
                            Printf("Type 4 Larger\n");
                    }
                    else if (UnionTypeMaybe == 5)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            Vec3 F3 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            byte F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            TableWithUnion F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            byte F6 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 7)
                            Printf("Type 5 Larger\n");
                    }
                    else if (UnionTypeMaybe == 6)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            HashWithString F3;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            Printf("hello");
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            float F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            TableWithUnion F6;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            Vec3 F7 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            Printf("hello");
                        }
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            byte F9 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 10)
                            Printf("Type 6 Larger\n");
                    }
                    else if (UnionTypeMaybe == 7)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            HashWithString F3;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            Printf("hello\n");
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            float F6 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            TableWithUnion F7 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[8]);
                            Vec3 F8 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            Vec3 F9 <bgcolor=cBlue>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 10)
                            Printf("Type 7 Larger\n");
                    }
                    else if (UnionTypeMaybe == 8)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            float F3 <bgcolor=cBlue, format=hex>;
                        }

                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            float F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            float F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            TableWithUnion F6;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            Vec3 F7 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[8]);
                            Vec3 F8 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            Vec3 F9 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[10]);
                            byte F10 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 11)
                            Printf("Type 8 Larger\n");
                    }
                    else if (UnionTypeMaybe == 9)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            byte F3 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            byte F4 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            struct
                            {
                                int DataOffset <bgcolor=cBlue, format=hex>;
                                FSeek(startof(DataOffset) + DataOffset);
                                
                                struct
                                {
                                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                    local int j = 0;
                                    for (j = 0; j < NumEntries; j++)
                                    {
                                         FSeek(startof(Offsets[j]) + Offsets[j]);
                                         struct
                                         {
                                             FlatArkFields Fields;
                                             
                                             FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                             HashWithString F1;
                                             
                                             FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                             float F2 <bgcolor=cBlue, format=hex>;
                                             
                                             if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                                             {
                                                 FSeek(startof(Fields) + Fields.OffsetTable[3]);
                                                 Vec3 F3 <bgcolor=cBlue>;
                                             }

                                         } Entry;
                                    }
                                } Table;
                            } F6;
                        }
                    }
                    else if (UnionTypeMaybe == 10)
                    {
                        FSeek(startof(Fields) + Fields.OffsetTable[2]);
                        HashWithString F2;
                        
                        FSeek(startof(Fields) + Fields.OffsetTable[3]);
                        Vec3 F3 <bgcolor=cBlue>;
                         
                        FSeek(startof(Fields) + Fields.OffsetTable[4]);
                        struct
                        {
                            int DataOffset <bgcolor=cBlue, format=hex>;
                            FSeek(startof(DataOffset) + DataOffset);
                            
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            
                            local int k = 0;
                            for (k = 0; k < NumEntries; k++)
                            {
                                 FSeek(startof(Offsets[k]) + Offsets[k]);
                                 struct
                                 {
                                    FlatArkFields Fields;
                                    
                                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                    HashWithString F1;
                                    
                                    FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                    float F2 <bgcolor=cBlue, format=hex>;
                                    
                                    FSeek(startof(Fields) + Fields.OffsetTable[3]);
                                    Vec3 F3 <bgcolor=cBlue, format=hex>;
                                 } Table;
                            }
                        } F4;
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 5)
                            Printf("Type 10 Larger\n");
                    }
                    else if (UnionTypeMaybe == 11)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            HashWithString F2;
                        }
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            HashWithString F3;
                        }
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            HashWithString F4;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            Vec3 F5 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            Vec3 F6 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            Vec3 F7 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[8]);
                            Vec3 F8 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            Vec3 F9 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[10]);
                            byte F10 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[11]);
                            byte F11 <bgcolor=cBlue, format=hex>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 12)
                            Printf("Type 13 Larger\n");
                    }
                    else if (UnionTypeMaybe == 13)
                    {
                        FSeek(startof(Fields) + Fields.OffsetTable[2]);
                        UnkStringWithUShortStruct F2;
                        
                        FSeek(startof(Fields) + Fields.OffsetTable[3]);
                        UnkStringWithUShortStruct F3;
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            float F4;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 5)
                            Printf("Type 13 Larger\n");
                    }
                    else if (UnionTypeMaybe == 15)
                    {
                        FSeek(startof(Fields) + Fields.OffsetTable[2]);
                        UnkStringWithUShortStruct F2;
                        
                        FSeek(startof(Fields) + Fields.OffsetTable[3]);
                        UnkStringWithUShortStruct F3;
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            float F4 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            float F5 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            int F6 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            byte F7  <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[8]);
                            float F8  <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            float F9  <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[10]);
                            int F10  <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[11]);
                            byte F11 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[12]) && Fields.OffsetTable[12])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[12]);
                            float F12 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[13]) && Fields.OffsetTable[13])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[13]);
                            float F13 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[14]) && Fields.OffsetTable[14])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[14]);
                            int F14 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[15]) && Fields.OffsetTable[15])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[15]);
                            byte F15 <bgcolor=cBlue>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 16)
                            Printf("Type 15 Larger\n");
                    }
                    else if (UnionTypeMaybe == 16)
                    {
                        if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                            UnkStringWithUShortStruct F2;
                        } 
                        
                        if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[3]);
                            UnkStringWithUShortStruct F3;
                        } 
                        
                        if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[4]);
                            float F4 <bgcolor=cBlue>;
                        } 
                        
                        if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[5]);
                            float F5 <bgcolor=cBlue>;
                        } 
                        
                        if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[6]);
                            float F6 <bgcolor=cBlue>;
                        } 
                        
                        if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[7]);
                            float F7 <bgcolor=cBlue>;
                        } 
                        
                        if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[8]);
                            float F8 <bgcolor=cBlue>;
                        } 
                        
                        if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[9]);
                            byte F9 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
                        {
                            FSeek(startof(Fields) + Fields.OffsetTable[10]);
                            byte F10 <bgcolor=cBlue>;
                        }
                        
                        if ((Fields.OffsetTableSize / 2 - 1) > 11)
                            Printf("Type 16 Larger\n");
                    }
                    else
                    {
                        Printf("Unimplemented union type %d\n", UnionTypeMaybe);   
                    }
                } Union;

             } Entry;
        }
    } Table;
} F3;

if (exists(Hdr.Fields.OffsetTable[4]) && Hdr.Fields.OffsetTable[4])
    Printf("hello\n");
    
FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[5]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        FlatArkFields Fields;
        
        FSeek(startof(Fields) + Fields.OffsetTable[1]);
        struct
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            struct
            {
                int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                local int j = 0;
                for (j = 0; j < NumEntries; j++)
                {
                     FSeek(startof(Offsets[j]) + Offsets[j]);
                     struct
                     {
                         FlatArkFields Fields;
                         
                         if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                         {
                             FSeek(startof(Fields) + Fields.OffsetTable[1]);
                             int F1 <bgcolor=cBlue>;
                         } 
                         
                         if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                         {
                             
                             FSeek(startof(Fields) + Fields.OffsetTable[2]);
                             struct
                             {
                                int ArrayOffset <fgcolor=cGreen, bgcolor=cBlue>;
                                FSeek(startof(ArrayOffset) + ArrayOffset);
                                
                                struct
                                {
                                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                    
                                    local int k = 0;
                                    for (k = 0; k < NumEntries; k++)
                                    {
                                        FSeek(startof(Offsets[k]) + Offsets[k]);
                                        struct
                                        {                    
                                            FlatArkFields Fields;
                                            
                                            FSeek(startof(Fields) + Fields.OffsetTable[1]);
                                            uint F1 <bgcolor=cBlue, format=hex>;
                                            
                                            FSeek(startof(Fields) + Fields.OffsetTable[2]);
                                            struct
                                            {
                                               uint NameOffset <bgcolor=cYellow>;
                                               FSeek(startof(NameOffset) + NameOffset);
                                               uint strLen <bgcolor=cYellow>;
                                               char str[strLen] <bgcolor=cYellow>;
                                            } F2_FieldName;
                                        } Table;
                                    }
                                } Array;
                             } F2;
                         } 
                     } Array;
                }
            } Table;
        } F1;
    } Table;
} F5;
