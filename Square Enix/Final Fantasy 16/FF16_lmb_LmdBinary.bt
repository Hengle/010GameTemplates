//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: Lmd Binary
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE! This file is a flatbuffer file
// It is not supposed to be mapped out, but only did to more easily reverse up the original schema
// You should be using the schema defined here if you intend to alter the file:
// https://github.com/Nenkai/FF16Tools/blob/master/FF16Tools.Files.FlatBuffers/LMDB_LmdBinary.fbs

typedef struct
{
    float x;
    float y;
} Vec2;


typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;

typedef struct
{
    FlatArkFields Fields;
    
    if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[1]);
        struct
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            struct
            {
                FlatArkFields Fields;
                
                if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    uint F1 <bgcolor=cBlue>;
                }
            } Tbl;
        } F1;
    }
    
    if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[2]);
        float F2 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[3]);
        float F3 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[4]) && Fields.OffsetTable[4])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[4]);
        byte F4 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[5]) && Fields.OffsetTable[5])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[5]);
        byte F5 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[6]);
        float F6 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[7]);
        float F7 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[8]);
        byte F8 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[9]);
        byte F9 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[10]);
        byte F10 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[11]);
        byte F11 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[12]) && Fields.OffsetTable[12])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[12]);
        byte F12 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[13]) && Fields.OffsetTable[13])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[13]);
        byte F13 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[14]) && Fields.OffsetTable[14])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[14]);
        float F14 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[15]) && Fields.OffsetTable[15])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[15]);
        float F15 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[16]) && Fields.OffsetTable[16])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[16]);
        float F16 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[17]) && Fields.OffsetTable[17])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[17]);
        float F17 <bgcolor=cBlue>;
    }
    
    if (exists(Fields.OffsetTable[18]) && Fields.OffsetTable[18])
    {
        FSeek(startof(Fields) + Fields.OffsetTable[18]);
        struct
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            struct
            {
                int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                local int j = 0;
                for (j = 0; j < NumEntries; j++)
                {
                     FSeek(startof(Offsets[j]) + Offsets[j]);
                     struct
                     {
                         FlatArkFields fields2;
                         
                         if (exists(fields2.OffsetTable[1]) && fields2.OffsetTable[1])
                         {
                             FSeek(startof(fields2) + fields2.OffsetTable[1]);
                             struct
                             {
                                 int DataOffset <format=hex, fgcolor=cRed>;
                                 FSeek(startof(DataOffset) + DataOffset);
                                 
                                 struct
                                 {
                                     FlatArkFields fields3;
                                     
                                     if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                                     {
                                         FSeek(startof(fields3) + fields3.OffsetTable[1]);
                                         uint F1 <bgcolor=cBlue>;
                                     }
                                 } Tbl;
                             } F1;
                         }
                         
                         if (exists(fields2.OffsetTable[2]) && fields2.OffsetTable[2])
                         {
                             FSeek(startof(fields2) + fields2.OffsetTable[2]);
                             struct
                             {
                                 int DataOffset <format=hex, fgcolor=cRed>;
                                 FSeek(startof(DataOffset) + DataOffset);
                                
                                 struct
                                 {
                                     int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                     int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                     local int j = 0;
                                     for (j = 0; j < NumEntries; j++)
                                     {
                                          FSeek(startof(Offsets[j]) + Offsets[j]);
                                          struct
                                          {
                                              FlatArkFields fields3;
                                              
                                              if (exists(fields3.OffsetTable[1]) && fields3.OffsetTable[1])
                                              {
                                                  FSeek(startof(fields3) + fields3.OffsetTable[1]);
                                                  byte F1 <bgcolor=cBlue>;
                                              }
                                              
                                              if (exists(fields3.OffsetTable[2]) && fields3.OffsetTable[2])
                                              {
                                                  FSeek(startof(fields3) + fields3.OffsetTable[2]);
                                                  float F2 <bgcolor=cBlue>;
                                              }
                                          } Entry;
                                     }
                                 } Table;
                             } F2;
                         }
                     } Table;
                }
            } Table;
        } F18;
    }
} StructF4Entry;
            
if (exists(Hdr.Fields.OffsetTable[3]) && Hdr.Fields.OffsetTable[3])
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
    struct
    {
        int DataOffset <format=hex, fgcolor=cRed>;
        FSeek(startof(DataOffset) + DataOffset);
        
        struct
        {
            FlatArkFields Fields;

            if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
            {
                FSeek(startof(Fields) + Fields.OffsetTable[1]);
                struct
                {
                   uint NameOffset <bgcolor=cYellow>;
                   FSeek(startof(NameOffset) + NameOffset);
                   
                   struct
                   {
                       uint strLen <bgcolor=cYellow>;
                       char str[strLen] <bgcolor=cYellow>;
                   } Str<read=str>;
                } F1;
            }
            
            if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
            {
                FSeek(startof(Fields) + Fields.OffsetTable[2]);
                uint F2 <bgcolor=cBlue>;
            }
        } Table;
    } F3;
}

if (exists(Hdr.Fields.OffsetTable[4]) && Hdr.Fields.OffsetTable[4])
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[4]);
    struct
    {
        int DataOffset <format=hex, fgcolor=cRed>;
        FSeek(startof(DataOffset) + DataOffset);
        
        struct
        {
            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
            local int j = 0;
            for (j = 0; j < NumEntries; j++)
            {
                 FSeek(startof(Offsets[j]) + Offsets[j]);
                 StructF4Entry Table;
            }
        } Table;
    } F4;
}

if (exists(Hdr.Fields.OffsetTable[5]) && Hdr.Fields.OffsetTable[5])
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[5]);
    struct
    {
        int DataOffset <format=hex, fgcolor=cRed>;
        FSeek(startof(DataOffset) + DataOffset);
        
        struct
        {
            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
            local int j = 0;
            for (j = 0; j < NumEntries; j++)
            {
                 FSeek(startof(Offsets[j]) + Offsets[j]);
                 struct
                 {
                     FlatArkFields Fields;
                     
                     if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                     {
                         FSeek(startof(Fields) + Fields.OffsetTable[1]);
                         uint F1 <bgcolor=cBlue>;
                     }
                 } Entry;
            }
        } Table;
    } F5;
}

if (exists(Hdr.Fields.OffsetTable[6]) && Hdr.Fields.OffsetTable[6])
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[6]);
    struct
    {
        int DataOffset <format=hex, fgcolor=cRed>;
        FSeek(startof(DataOffset) + DataOffset);
        
        StructF4Entry Entry;
    } F6;
}

if (exists(Hdr.Fields.OffsetTable[7]) && Hdr.Fields.OffsetTable[7])
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[7]);
    struct
    {
        int DataOffset <format=hex, fgcolor=cRed>;
        FSeek(startof(DataOffset) + DataOffset);
        
        StructF4Entry Entry;
    } F7;
}
