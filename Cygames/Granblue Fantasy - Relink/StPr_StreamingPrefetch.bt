//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: GBFR StPr StreamingPrefetch Binary
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE! This file is a flatbuffer file
// It is not supposed to be mapped out, but only did to more easily reverse up the original schema

typedef struct
{
    float x;
    float y;
} Vec2;


typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize <fgcolor=cGreen>;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;


FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[2]);
struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
            FSeek(startof(Offsets[j]) + Offsets[j]);
            struct
            {
                FlatArkFields Fields;
                
                if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[1]);
                    uint QuestIdKey <bgcolor=cBlue, format=hex>;
                }
                
                if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[2]);
                    struct 
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            local int j = 0;
                            for (j = 0; j < NumEntries; j++)
                            {
                                FSeek(startof(Offsets[j]) + Offsets[j]);
                                struct
                                {
                                    FlatArkFields Fields2;
                                    
                                    if (exists(Fields2.OffsetTable[1]) && Fields2.OffsetTable[1])
                                    {
                                        FSeek(startof(Fields2) + Fields2.OffsetTable[1]);
                                        uint ObjectIdKey <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields2.OffsetTable[2]) && Fields2.OffsetTable[2])
                                    {
                                        FSeek(startof(Fields2) + Fields2.OffsetTable[2]);
                                        byte F2 <bgcolor=cBlue, format=hex>;
                                    }
                                } Entry;
                            }
                        } Table;
                    } ObjectPreloadRequests;
                }
                
                if (exists(Fields.OffsetTable[3]) && Fields.OffsetTable[3])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[3]);
                    struct 
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                            local int j = 0;
                            for (j = 0; j < NumEntries; j++)
                            {
                                FSeek(startof(Offsets[j]) + Offsets[j]);
                                struct
                                {
                                    FlatArkFields Fields2;
                                    
                                    if (exists(Fields2.OffsetTable[1]) && Fields2.OffsetTable[1])
                                    {
                                        FSeek(startof(Fields2) + Fields2.OffsetTable[1]);
                                        uint64 GraniteFileNameHash <format=hex, bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields2.OffsetTable[2]) && Fields2.OffsetTable[2])
                                    {
                                        FSeek(startof(Fields2) + Fields2.OffsetTable[2]);
                                        byte TileSetNumber <bgcolor=cBlue, format=hex>;
                                    }
                                    
                                    if (exists(Fields2.OffsetTable[3]) && Fields2.OffsetTable[3])
                                    {
                                        FSeek(startof(Fields2) + Fields2.OffsetTable[3]);
                                        byte Flags_F3 <bgcolor=cBlue, format=hex>;
                                    }
                                } TexturePreloadRequest <read=Str("GraniteFileNameHash: %016LX", GraniteFileNameHash)>;
                            }
                        } Table;
                    } TexturePreloadRequests;
                }
            } Quest <read=Str("Quest: %x", QuestIdKey)>;
        }
    } Table;
} TextureStreaming;
