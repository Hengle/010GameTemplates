//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    FlatArkFields TBoolFields;
                        
    if (SeekToEntryIfExists(TBoolFields, 1))
    {
        struct 
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            EventKeyParamData Data;
        } F1_EventKeyParamData;
    }
    
    if (SeekToEntryIfExists(TBoolFields, 2))
        byte F2 <format=hex, bgcolor=cBlue>; // is this field even used or read by game?
        
    if (SeekToEntryIfExists(TBoolFields, 3)) // Array of MaterialTargetData? MaterialTargetData = uint, [uint]?
    {
       struct
       {
           int DataOffset <format=hex, fgcolor=cRed>;
           FSeek(startof(DataOffset) + DataOffset);
           
           struct
           {
               int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
               int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
               local int j = 0;
               for (j = 0; j < NumEntries; j++)
               {
                   FSeek(startof(Offsets[j]) + Offsets[j]);
                   struct
                   {
                       FlatArkFields Fields_;  
                       
                       if (SeekToEntryIfExists(Fields_, 1))
                          StringField F1 <format=hex, bgcolor=cBlue>; 
                   } Entry;
               }
           } Array;
       } F3; 
    }
    
    if ((TBoolFields.OffsetTableSize / 2 - 1) > 4)
        Printf("EventKeyMaterialTargetData Larger\n");
        
} EventKeyMaterialTargetData; 

typedef struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
            FSeek(startof(Offsets[j]) + Offsets[j]);
            EventKeyMaterialTargetData Entry;
        }
    } EventKeyParamData_TBool_;
} EventKeyMaterialTargetDataArray;

typedef struct
{
     int DataOffset <format=hex, fgcolor=cRed>;
     FSeek(startof(DataOffset) + DataOffset);
     
     struct
     {
         FlatArkFields Fields5;
         
         if (SeekToEntryIfExists(Fields5, 1))
             byte F1 <format=hex, bgcolor=cBlue>;
         
         if (SeekToEntryIfExists(Fields5, 2))
             EventKeyMaterialTargetDataArray F2 <format=hex, bgcolor=cBlue>;
     } Table;
} EventKeyMaterialTargetDataStruct; // Timeline::EventKeyMaterialTargetData::MaterialTargetData

typedef struct
{
    FlatArkFields TBoolFields;
                        
    if (SeekToEntryIfExists(TBoolFields, 1))
    {
        struct 
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            EventKeyParamData Data;
        } F1_EventKeyParamData;
    }
    
    if (SeekToEntryIfExists(TBoolFields, 2))
        byte F2 <format=hex, bgcolor=cBlue>; // is this field even used or read by game?
        
    if (SeekToEntryIfExists(TBoolFields, 3))
       StringField F3; 
        
    if ((TBoolFields.OffsetTableSize / 2 - 1) > 4)
        Printf("EventKeyTextureData Larger\n");
} EventKeyTextureData; 

typedef struct 
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
            FSeek(startof(Offsets[j]) + Offsets[j]);
            EventKeyTextureData Entry;
        }
    } EventKeyTextureData_Array;
} EventKeyTextureDataArray;

typedef struct
{
     int DataOffset <format=hex, fgcolor=cRed>;
     FSeek(startof(DataOffset) + DataOffset);
     
     struct
     {
         FlatArkFields Fields5;
         
         if (SeekToEntryIfExists(Fields5, 1))
             byte F1 <format=hex, bgcolor=cBlue>;
         
         if (SeekToEntryIfExists(Fields5, 2))
             EventKeyTextureDataArray F2 <format=hex, bgcolor=cBlue>;
     } Table;
} EventKeyTextureDataStruct;

typedef struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
           
    struct
    { 
        FlatArkFields tempfields;
        
        if (SeekToEntryIfExists(tempfields, 1))
            FilterBoolEntry F1 <format=hex, bgcolor=cBlue>;
            
        if (SeekToEntryIfExists(tempfields, 2))
            FilterFloatEntry F2 <format=hex, bgcolor=cBlue>;
            
        if (SeekToEntryIfExists(tempfields, 3))
            FilterFloatEntry F3 <format=hex, bgcolor=cBlue>;
            
        if (SeekToEntryIfExists(tempfields, 4))
            FilterFloatEntry F4 <format=hex, bgcolor=cBlue>;
    } Table;
    
} UnkBool3xFloatStruct;

typedef struct
{
    int DataOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(DataOffset) + DataOffset);
    
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        local int j = 0;
        for (j = 0; j < NumEntries; j++)
        {
            FSeek(startof(Offsets[j]) + Offsets[j]);
            struct
            {
                FlatArkFields F1Fields;
                        
                if (SeekToEntryIfExists(F1Fields, 1))
                    EventKeyTextureDataStruct F1;
            
                if (SeekToEntryIfExists(F1Fields, 2))
                    EventKeyTextureDataStruct F2;
                    
                if (SeekToEntryIfExists(F1Fields, 3))
                    Unk4xFloatStruct F3;
                    
                if (SeekToEntryIfExists(F1Fields, 4))
                    Unk4xFloatStruct F4;
                    
                if (SeekToEntryIfExists(F1Fields, 5))
                    FilterFloatEntry F5;
                    
                if (SeekToEntryIfExists(F1Fields, 6))
                    FilterBoolEntry F6;
                    
                if (SeekToEntryIfExists(F1Fields, 7))
                    FilterFloatEntry F7;
                    
                if (SeekToEntryIfExists(F1Fields, 8))
                    Unk2xFloatStruct F8;
                    
                if (SeekToEntryIfExists(F1Fields, 9))
                    FilterBoolEntry F9;
                    
                if (SeekToEntryIfExists(F1Fields, 10))
                    FilterFloatEntry F10;
                    
                /*
                if (SeekToEntryIfExists(F1Fields, 11))
                    FilterFloatEntry F11;
                    
                if (SeekToEntryIfExists(F1Fields, 12))
                    FilterFloatEntry F12;
                */
                
                if (SeekToEntryIfExists(F1Fields, 13))
                    FilterFloatEntry F13;
                
                if (SeekToEntryIfExists(F1Fields, 14))
                    FilterFloatEntry F14;
                    
                if (SeekToEntryIfExists(F1Fields, 15))
                    FilterFloatEntry F15;
                    
                if (SeekToEntryIfExists(F1Fields, 16))
                    FilterFloatEntry F16;
                    
                if (SeekToEntryIfExists(F1Fields, 17))
                    Unk3xFloatStruct F17;
                    
                if (SeekToEntryIfExists(F1Fields, 18))
                    FilterFloatEntry F18;
                    
                if (SeekToEntryIfExists(F1Fields, 19))
                    FilterFloatEntry F19;
                    
                if (SeekToEntryIfExists(F1Fields, 20))
                    FilterFloatEntry F20;
                    
                if (SeekToEntryIfExists(F1Fields, 21))
                    FilterFloatEntry F21;
                    
                if (SeekToEntryIfExists(F1Fields, 22))
                    FilterFloatEntry F22;
                    
                if (SeekToEntryIfExists(F1Fields, 23))
                    FilterFloatEntry F23;
                    
                if (SeekToEntryIfExists(F1Fields, 24))
                    FilterFloatEntry F24;
                    
                if (SeekToEntryIfExists(F1Fields, 25))
                    FilterFloatEntry F25;
                    
                if (SeekToEntryIfExists(F1Fields, 26))
                    FilterFloatEntry F26;
                    
                if (SeekToEntryIfExists(F1Fields, 27))
                    FilterFloatEntry F27;
                    
                if (SeekToEntryIfExists(F1Fields, 28))
                    FilterBoolEntry F28;
                    
                if (SeekToEntryIfExists(F1Fields, 29))
                    FilterBoolEntry F29;
                    
                if (SeekToEntryIfExists(F1Fields, 30))
                    FilterFloatEntry F30;
                    
                if (SeekToEntryIfExists(F1Fields, 31))
                    Unk2xFloatStruct F31;
                    
                if (SeekToEntryIfExists(F1Fields, 32))
                    FilterFloatEntry F32;
                    
                if (SeekToEntryIfExists(F1Fields, 33))
                    FilterFloatEntry F33;
                    
                if (SeekToEntryIfExists(F1Fields, 34))
                    FilterFloatEntry F34;
                    
                if (SeekToEntryIfExists(F1Fields, 35))
                    Unk2xFloatStruct F35;
                    
                if (SeekToEntryIfExists(F1Fields, 36))
                    Unk2xFloatStruct F36;
                    
                if (SeekToEntryIfExists(F1Fields, 37))
                    FilterFloatEntry F37;
                    
                if (SeekToEntryIfExists(F1Fields, 38))
                    Unk2xFloatStruct F38;
                    
                if (SeekToEntryIfExists(F1Fields, 39))
                    Unk2xFloatStruct F39;
                    
                if (SeekToEntryIfExists(F1Fields, 40))
                    Unk2xFloatStruct F40;
                    
                if (SeekToEntryIfExists(F1Fields, 41))
                    FilterFloatEntry F41;
                    
                if (SeekToEntryIfExists(F1Fields, 42))
                    FilterFloatEntry F42;
                    
                if (SeekToEntryIfExists(F1Fields, 43))
                    FilterFloatEntry F43;
                    
                if (SeekToEntryIfExists(F1Fields, 44))
                    FilterBoolEntry F44;
                    
                if (SeekToEntryIfExists(F1Fields, 45))
                    FilterFloatEntry F45;
                    
                if (SeekToEntryIfExists(F1Fields, 46))
                    FilterFloatEntry F46;
                    
                if (SeekToEntryIfExists(F1Fields, 47))
                    FilterFloatEntry F47;
                    
                if ((F1Fields.OffsetTableSize / 2 - 1) > 48)
                    Printf("EventSubSequenceGroundSmokeData Larger\n");
            } Entry;
        }
    } Array;
} EventSubSequenceGroundSmokeData; // Timeline::EventSubSequenceGroundSmokeData

typedef struct
{
    FlatArkFields ObjectDataFields;
    
    if (SeekToEntryIfExists(ObjectDataFields, 1))
        Unk3Hash F1 <format=hex, bgcolor=cBlue>;
    
    if (SeekToEntryIfExists(ObjectDataFields, 2))
        byte F2_UnionType <format=hex, bgcolor=cBlue, fgcolor=cYellow>;
    
    if (SeekToEntryIfExists(ObjectDataFields, 3))
        uint64 F3 <format=hex, bgcolor=cBlue>;
           
    if (SeekToEntryIfExists(ObjectDataFields, 4))
    {
        struct
        {
            int DataOffset <format=hex, fgcolor=cRed>;
            FSeek(startof(DataOffset) + DataOffset);
            
            struct
            {
                FlatArkFields Fields4;
                
                if (SeekToEntryIfExists(Fields4, 1))
                    FilterBoolEntry F1;
                
                if (SeekToEntryIfExists(Fields4, 2))
                    FilterBoolEntry F2;

                if (SeekToEntryIfExists(Fields4, 3))
                {
                    struct
                    {
                       int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields FilterFloatFields;
                            
                            if (SeekToEntryIfExists(FilterFloatFields, 1))
                                EventKeyParamData_TFloatArray F1 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 2))
                                EventKeyParamData_TFloatArray F2 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 3))
                                EventKeyParamData_TFloatArray F3 <format=hex, bgcolor=cBlue>;
                        } Table;
                    } F3;  
                } 

                if (SeekToEntryIfExists(Fields4, 4))
                {
                    // Same as F3
                    struct
                    {
                       int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields FilterFloatFields;
                            
                            if (SeekToEntryIfExists(FilterFloatFields, 1))
                                EventKeyParamData_TFloatArray F1 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 2))
                                EventKeyParamData_TFloatArray F2 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 3))
                                EventKeyParamData_TFloatArray F3 <format=hex, bgcolor=cBlue>;
                        } Table;
                    } F4;     
                }
                    
                if (SeekToEntryIfExists(Fields4, 5))
                {
                    // Same as F5
                    struct
                    {
                       int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields FilterFloatFields;
                            
                            if (SeekToEntryIfExists(FilterFloatFields, 1))
                                EventKeyParamData_TFloatArray F1 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 2))
                                EventKeyParamData_TFloatArray F2 <format=hex, bgcolor=cBlue>;
                                
                            if (SeekToEntryIfExists(FilterFloatFields, 3))
                                EventKeyParamData_TFloatArray F3 <format=hex, bgcolor=cBlue>;
                        } Table;
                    } F5;     
                }
                    
                if (SeekToEntryIfExists(Fields4, 6))
                    FilterStringEntry F6;
                    
                if (SeekToEntryIfExists(Fields4, 7))
                {
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        
                        struct
                        {
                            FlatArkFields FilterFloatFields;
                            
                            if (SeekToEntryIfExists(FilterFloatFields, 1))
                                byte F1 <format=hex, bgcolor=cBlue>;
                            
                            if (SeekToEntryIfExists(FilterFloatFields, 2))
                            {
                                struct
                                {
                                    int DataOffset <format=hex, fgcolor=cRed>;
                                    FSeek(startof(DataOffset) + DataOffset);
                                    
                                    struct
                                    {
                                        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                                        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
                                        local int j = 0;
                                        for (j = 0; j < NumEntries; j++)
                                        {
                                            FSeek(startof(Offsets[j]) + Offsets[j]);
                                            struct
                                            {
                                                FlatArkFields Fields__;  
                                                
                                                if (SeekToEntryIfExists(Fields__, 1))
                                                {
                                                    struct 
                                                    {
                                                        int DataOffset <format=hex, fgcolor=cRed>;
                                                        FSeek(startof(DataOffset) + DataOffset);
                                                        
                                                        EventKeyParamData Data;
                                                    } F1_EventKeyParamData;
                                                }
                                                    
                                                if (SeekToEntryIfExists(Fields__, 2))
                                                {
                                                    struct
                                                    {
                                                        int DataOffset <format=hex, fgcolor=cRed>;
                                                        FSeek(startof(DataOffset) + DataOffset);
                                                        
                                                        struct
                                                        {
                                                            FlatArkFields Fields___;
                                                            
                                                            if (SeekToEntryIfExists(Fields___, 1))
                                                                byte F1 <format=hex, bgcolor=cBlue>;
                                                                
                                                            if (SeekToEntryIfExists(Fields___, 2))
                                                                int F2 <format=hex, bgcolor=cBlue>;
                                                                
                                                            if (SeekToEntryIfExists(Fields___, 3))
                                                                Vec3 F3 <format=hex, bgcolor=cBlue>;
                                                                
                                                            if (SeekToEntryIfExists(Fields___, 4))
                                                                uint64 F4 <format=hex, bgcolor=cBlue>;
                                                        } Table;
                                                    } F2;   
                                                }
                                            } Entry;
                                        }
                                    } Array;
                                } F2_EventKeyBindingData;
                            }
                        } Table;
                    } F7;
                }
                
                if (SeekToEntryIfExists(Fields4, 8))
                    FilterIntEntry F8;
                    
                if (SeekToEntryIfExists(Fields4, 9))
                    FilterBoolEntry F9;
                    
                if (SeekToEntryIfExists(Fields4, 10))
                    FilterBoolEntry F10;
                    
                if (SeekToEntryIfExists(Fields4, 11))
                    FilterBoolEntry F11;
                    
                if (SeekToEntryIfExists(Fields4, 12))
                    FilterIntEntry F12;
                    
                if ((Fields4.OffsetTableSize / 2 - 1) > 13)
                    Printf("SceneObjectData F4 Larger\n");
            } Table;
        } F4;
    }
        
    switch (F2_UnionType)
    {
        case 1: // EventSubSequenceGroupData - EventSubSequenceSceneObjectData?
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe1 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterBoolEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterBoolEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterBoolEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterBoolEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterBoolEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            UnkFloatStructMap F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            UnkFloatStructMap F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            FilterFloatEntry F8;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 9)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 2: // EventSubSequenceFogBoardData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe2 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            Unk4xFloatStruct F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterFloatEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterBoolEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            EventKeyTextureDataStruct F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterBoolEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            FilterFloatEntry F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            EventKeyTextureDataStruct F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterBoolEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            FilterBoolEntry F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            FilterBoolEntry F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterBoolEntry F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            EventKeyTextureDataStruct F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterFloatEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterFloatEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterBoolEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            FilterBoolEntry F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            Unk2xFloatStruct F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            FilterBoolEntry F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            FilterBoolEntry F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            FilterBoolEntry F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            EventKeyTextureDataStruct F23;
                            
                        if (SeekToEntryIfExists(Fields6, 24))
                            EventKeyTextureDataStruct F24;
                            
                        if (SeekToEntryIfExists(Fields6, 25))
                            UnkBool3xFloatStruct F25;
                            
                        if (SeekToEntryIfExists(Fields6, 26))
                            UnkBool3xFloatStruct F26;
                            
                        if (SeekToEntryIfExists(Fields6, 27))
                            UnkBool3xFloatStruct F27;
                            
                        if (SeekToEntryIfExists(Fields6, 28))
                            UnkBool3xFloatStruct F28;
                            
                        if (SeekToEntryIfExists(Fields6, 29))
                            FilterFloatEntry F29;
                            
                        if (SeekToEntryIfExists(Fields6, 30))
                            FilterFloatEntry F30;
                            
                        if (SeekToEntryIfExists(Fields6, 31))
                            FilterFloatEntry F31;

                        if (SeekToEntryIfExists(Fields6, 32))
                            Unk2xFloatStruct F32;
                            
                        if (SeekToEntryIfExists(Fields6, 33))
                            Unk2xFloatStruct F33;
                            
                        if (SeekToEntryIfExists(Fields6, 34))
                            Unk2xFloatStruct F34;

                        if (SeekToEntryIfExists(Fields6, 35))
                            Unk2xFloatStruct F35;
                            
                        if (SeekToEntryIfExists(Fields6, 36))
                            FilterFloatEntry F36;
                            
                        if (SeekToEntryIfExists(Fields6, 37))
                            FilterFloatEntry F37;
                            
                        if (SeekToEntryIfExists(Fields6, 38))
                            FilterFloatEntry F38;
                            
                        if (SeekToEntryIfExists(Fields6, 39))
                            FilterFloatEntry F39;
                            
                        if (SeekToEntryIfExists(Fields6, 40))
                            EventKeyParamData_TKeyFloatArray F40;
                            
                        if (SeekToEntryIfExists(Fields6, 41))
                            FilterFloatEntry F41;
                            
                        if (SeekToEntryIfExists(Fields6, 42))
                            FilterFloatEntry F42;
                            
                        if (SeekToEntryIfExists(Fields6, 43))
                            FilterFloatEntry F43;
                            
                        if (SeekToEntryIfExists(Fields6, 44))
                            FilterFloatEntry F44;
                            
                        if (SeekToEntryIfExists(Fields6, 45))
                            FilterIntEntry F45;
                            
                        if (SeekToEntryIfExists(Fields6, 46))
                            FilterBoolEntry F46;
                            
                        if (SeekToEntryIfExists(Fields6, 47))
                            FilterBoolEntry F47;
                            
                        if (SeekToEntryIfExists(Fields6, 48))
                            FilterFloatEntry F48;
                            
                        if (SeekToEntryIfExists(Fields6, 49))
                            FilterFloatEntry F49;
                            
                        if (SeekToEntryIfExists(Fields6, 50))
                            FilterFloatEntry F50;
                            
                        if (SeekToEntryIfExists(Fields6, 51))
                            UnkFloatStructMap F51;
                            
                        if (SeekToEntryIfExists(Fields6, 52))
                            UnkFloatStructMap F52;
                            
                        if (SeekToEntryIfExists(Fields6, 53))
                            FilterBoolEntry F53;
                            
                        if (SeekToEntryIfExists(Fields6, 54))
                            FilterFloatEntry F54;
                            
                        if (SeekToEntryIfExists(Fields6, 55))
                            FilterBoolEntry F55;
                            
                        if (SeekToEntryIfExists(Fields6, 56))
                            FilterFloatEntry F56;
                            
                        if (SeekToEntryIfExists(Fields6, 57))
                            FilterFloatEntry F57;
                            
                        if (SeekToEntryIfExists(Fields6, 58))
                            FilterBoolEntry F58;
                            
                        if (SeekToEntryIfExists(Fields6, 59))
                            FilterBoolEntry F59;
                            
                        if (SeekToEntryIfExists(Fields6, 60))
                            FilterFloatEntry F60;
                            
                        if (SeekToEntryIfExists(Fields6, 61)) // ?
                            FilterFloatEntry F61;
                            
                        if (SeekToEntryIfExists(Fields6, 62)) // ?
                            FilterFloatEntry F62;
                            
                        if (SeekToEntryIfExists(Fields6, 63))
                            FilterBoolEntry F63;
                            
                        if (SeekToEntryIfExists(Fields6, 64))
                            FilterBoolEntry F64;
                            
                        if (SeekToEntryIfExists(Fields6, 65))
                            Unk4xFloatStruct F65;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 66)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 3: // EventSubSequenceAmbientAreaLightSceneObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe3 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterBoolEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterFloatEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterFloatEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            Unk4xFloatStruct F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            Unk4xFloatStruct F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            Unk4xFloatStruct F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            Unk3xFloatStruct F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            Unk4xFloatStruct F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            Unk4xFloatStruct F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            Unk4xFloatStruct F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            Unk3xFloatStruct F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            Unk3xFloatStruct F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterBoolEntry F15;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 16)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 4: // EventSubSequenceDropShadowControlPointData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe3 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterBoolEntry F1;
                    } Table;
                } F6;
            }
            break;
            
        case 5: // EventSubSequenceDropShadowControlPointData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe5 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterIntEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterFloatEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            Unk3xFloatStruct F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            Unk3xFloatStruct F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            FilterFloatEntry F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterBoolEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                        {
                            struct
                            {
                                int DataOffset <format=hex, fgcolor=cRed>;
                                FSeek(startof(DataOffset) + DataOffset);
                                
                                struct
                                {
                                    FlatArkFields Fields11;
                                    
                                    if (SeekToEntryIfExists(Fields11, 1))
                                        FilterFloatEntry F1;
                                        
                                    if (SeekToEntryIfExists(Fields11, 2))
                                        FilterFloatEntry F2;
                                        
                                    if (SeekToEntryIfExists(Fields11, 3))
                                        Unk2xFloatStruct F3;
                                        
                                    if (SeekToEntryIfExists(Fields11, 4))
                                        FilterFloatEntry F4;
                                        
                                    if (SeekToEntryIfExists(Fields11, 5))
                                        FilterBoolEntry F5;
                                        
                                    if (SeekToEntryIfExists(Fields11, 6))
                                        FilterStringEntry F6;
                                } Table;
                            } F11;
                        }
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                        {
                            // Same struct as F11
                            struct
                            {
                                int DataOffset <format=hex, fgcolor=cRed>;
                                FSeek(startof(DataOffset) + DataOffset);
                                
                                struct
                                {
                                    FlatArkFields Fields11;
                                    
                                    if (SeekToEntryIfExists(Fields11, 1))
                                        FilterFloatEntry F1;
                                        
                                    if (SeekToEntryIfExists(Fields11, 2))
                                        FilterFloatEntry F2;
                                        
                                    if (SeekToEntryIfExists(Fields11, 3))
                                        Unk2xFloatStruct F3;
                                        
                                    if (SeekToEntryIfExists(Fields11, 4))
                                        FilterFloatEntry F4;
                                        
                                    if (SeekToEntryIfExists(Fields11, 5))
                                        FilterBoolEntry F5;
                                        
                                    if (SeekToEntryIfExists(Fields11, 6))
                                        FilterStringEntry F6;
                                } Table;
                            } F12;   
                        }
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterFloatEntry F13;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 14)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 6: // EventSubSequenceWindSceneObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe6 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterBoolEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterHash64Entry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterFloatEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterIntEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            Unk2xFloatStruct F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            FilterFloatEntry F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterFloatEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            FilterFloatEntry F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            FilterBoolEntry F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterBoolEntry F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            FilterBoolEntry F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterFloatEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterFloatEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterFloatEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            Unk3xFloatStruct F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            FilterFloatEntry F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            FilterBoolEntry F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            byte F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            FilterFloatEntry F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            FilterBoolEntry F23;
                        if ((Fields6.OffsetTableSize / 2 - 1) > 24)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 7: // EventSubSequenceDropShadowSceneObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe7 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            byte F1; // not bool
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterBoolEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterIntEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            FilterFloatEntry F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            FilterBoolEntry F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterBoolEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            FilterBoolEntry F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            Unk4xFloatStruct F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterFloatEntry F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            FilterBoolEntry F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterBoolEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterIntEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterIntEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            FilterUIntEntry F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            FilterFloatEntry F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            FilterFloatEntry F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            FilterFloatEntry F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            FilterFloatEntry F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            FilterFloatEntry F23;
                            
                        if (SeekToEntryIfExists(Fields6, 24))
                            FilterFloatEntry F24;
                            
                        if (SeekToEntryIfExists(Fields6, 25))
                            FilterFloatEntry F25;
                            
                        if (SeekToEntryIfExists(Fields6, 26))
                            FilterFloatEntry F26;
                            
                        if (SeekToEntryIfExists(Fields6, 27))
                            FilterIntEntry F27;
                            
                        if (SeekToEntryIfExists(Fields6, 28))
                            FilterFloatEntry F28;
                            
                        if (SeekToEntryIfExists(Fields6, 29))
                            FilterFloatEntry F29;
                            
                        if (SeekToEntryIfExists(Fields6, 30))
                            FilterBoolEntry F30;
                            
                        if (SeekToEntryIfExists(Fields6, 31))
                            EventKeyMaterialTargetDataStruct F31;

                        if (SeekToEntryIfExists(Fields6, 32))
                            FilterBoolEntry F32;
                            
                        if (SeekToEntryIfExists(Fields6, 33))
                            FilterFloatEntry F33;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 34)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 8: // EventSubSequenceLightSceneObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe8 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            byte F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            Unk4xFloatStruct F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterFloatEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            Unk2xFloatStruct F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            EventKeyMaterialTargetDataStruct F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 8)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 9: // EventSubSequenceCharacterDirectionalLightSceneObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe9 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            byte F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterBoolEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            Unk4xFloatStruct F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            FilterFloatEntry F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            FilterFloatEntry F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterFloatEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            Unk4xFloatStruct F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            Unk2xFloatStruct F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            Unk2xFloatStruct F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            FilterFloatEntry F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterBoolEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterBoolEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterBoolEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            FilterBoolEntry F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            FilterFloatEntry F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            FilterFloatEntry F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            FilterFloatEntry F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            FilterFloatEntry F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            FilterFloatEntry F23;
                            
                        if (SeekToEntryIfExists(Fields6, 24))
                            FilterFloatEntry F24;
                            
                        if (SeekToEntryIfExists(Fields6, 25))
                            FilterFloatEntry F25;
                            
                        if (SeekToEntryIfExists(Fields6, 26))
                            FilterFloatEntry F26;
                            
                        if (SeekToEntryIfExists(Fields6, 27))
                            FilterIntEntry F27;
                            
                        if (SeekToEntryIfExists(Fields6, 28))
                            Unk4xFloatStruct F28;
                            
                        if (SeekToEntryIfExists(Fields6, 29))
                            Unk4xFloatStruct F29;
                            
                        if (SeekToEntryIfExists(Fields6, 30))
                            FilterFloatEntry F30;
                            
                        if (SeekToEntryIfExists(Fields6, 31))
                            FilterFloatEntry F31;

                        /*
                        if (SeekToEntryIfExists(Fields6, 32))
                            FilterFloatEntry F32;
                            
                        if (SeekToEntryIfExists(Fields6, 33))
                            FilterFloatEntry F33;
                            
                        if (SeekToEntryIfExists(Fields6, 34))
                            FilterFloatEntry F34;
                        */
                        if (SeekToEntryIfExists(Fields6, 35))
                            FilterFloatEntry F35;
                            
                        if (SeekToEntryIfExists(Fields6, 36))
                            FilterFloatEntry F36;
                            
                        if (SeekToEntryIfExists(Fields6, 37))
                            FilterFloatEntry F37;
                            
                        if (SeekToEntryIfExists(Fields6, 38))
                            FilterFloatEntry F38;
                            
                        if (SeekToEntryIfExists(Fields6, 39))
                            FilterBoolEntry F39;
                            
                        if (SeekToEntryIfExists(Fields6, 40))
                            FilterFloatEntry F40;
                            
                        if (SeekToEntryIfExists(Fields6, 41))
                            FilterFloatEntry F41;
                            
                        if (SeekToEntryIfExists(Fields6, 42))
                            FilterFloatEntry F42;
                            
                        if (SeekToEntryIfExists(Fields6, 43))
                            FilterFloatEntry F43;
                            
                        if (SeekToEntryIfExists(Fields6, 44))
                            FilterFloatEntry F44;
                            
                        if (SeekToEntryIfExists(Fields6, 45))
                            FilterBoolEntry F45;
                            
                        if (SeekToEntryIfExists(Fields6, 46))
                            Unk4xFloatStruct F46;
                            
                        if (SeekToEntryIfExists(Fields6, 47))
                            FilterBoolEntry F47;
                            
                        if (SeekToEntryIfExists(Fields6, 48))
                            FilterBoolEntry F48;
                            
                        if (SeekToEntryIfExists(Fields6, 49))
                            Unk4xFloatStruct F49;
                            
                        if (SeekToEntryIfExists(Fields6, 50))
                            Unk4xFloatStruct F50;
                            
                        if (SeekToEntryIfExists(Fields6, 51))
                            FilterFloatEntry F51;
                            
                        if (SeekToEntryIfExists(Fields6, 52))
                            FilterFloatEntry F52;
                            
                        if (SeekToEntryIfExists(Fields6, 53))
                            Unk4xFloatStruct F53;
                            
                        if (SeekToEntryIfExists(Fields6, 54))
                            FilterFloatEntry F54;
                            
                        if (SeekToEntryIfExists(Fields6, 55))
                            Unk2xFloatStruct F55;
                            
                        if (SeekToEntryIfExists(Fields6, 56))
                            FilterBoolEntry F56;
                            
                        if (SeekToEntryIfExists(Fields6, 57))
                            Unk4xFloatStruct F57;
                            
                        /*
                        if (SeekToEntryIfExists(Fields6, 58))
                            FilterFloatEntry F58;
                            
                        if (SeekToEntryIfExists(Fields6, 59))
                            FilterFloatEntry F59;
                            
                        if (SeekToEntryIfExists(Fields6, 60))
                            FilterFloatEntry F60;
                        */
                        
                        if (SeekToEntryIfExists(Fields6, 61))
                            EventKeyMaterialTargetDataStruct F61;

                        if (SeekToEntryIfExists(Fields6, 62))
                            FilterFloatEntry F62;
                            
                        if (SeekToEntryIfExists(Fields6, 63))
                            FilterFloatEntry F63;
                            
                        if (SeekToEntryIfExists(Fields6, 64)) // unsure, don't think any reads this.
                            FilterFloatEntry F64;
                        
                        if (SeekToEntryIfExists(Fields6, 65))
                            Unk4xFloatStruct F65;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 66)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 10: // EventSubSequenceCharacterMaterialData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe10 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterIntEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterIntEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterBoolEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterStringEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                            
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            FilterFloatEntry F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            FilterFloatEntry F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            FilterBoolEntry F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            FilterStringEntry F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            FilterBoolEntry F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterStringEntry F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            FilterBoolEntry F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterBoolEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterBoolEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterBoolEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            FilterStringEntry F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            FilterFloatEntry F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            Unk2xFloatStruct F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            Unk2xFloatStruct F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            Unk2xFloatStruct F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            Unk2xFloatStruct F23;
                            
                        if (SeekToEntryIfExists(Fields6, 24))
                            FilterFloatEntry F24;
                            
                        if (SeekToEntryIfExists(Fields6, 25))
                            FilterFloatEntry F25;
                            
                        if (SeekToEntryIfExists(Fields6, 26))
                            FilterBoolEntry F26;
                            
                        if (SeekToEntryIfExists(Fields6, 27))
                            FilterBoolEntry F27;
                            
                        if (SeekToEntryIfExists(Fields6, 28))
                            FilterBoolEntry F28;
                            
                        if (SeekToEntryIfExists(Fields6, 29))
                            FilterBoolEntry F29;
                            
                        if (SeekToEntryIfExists(Fields6, 30))
                            FilterFloatEntry F30;
                            
                        if (SeekToEntryIfExists(Fields6, 31))
                            FilterFloatEntry F31;

                        if (SeekToEntryIfExists(Fields6, 32))
                            FilterFloatEntry F32;
                            
                        if (SeekToEntryIfExists(Fields6, 33))
                            FilterBoolEntry F33;
                            
                        if (SeekToEntryIfExists(Fields6, 34))
                            FilterBoolEntry F34;

                        if (SeekToEntryIfExists(Fields6, 35))
                            FilterBoolEntry F35;
                            
                        if (SeekToEntryIfExists(Fields6, 36))
                            FilterBoolEntry F36;
                            
                        if (SeekToEntryIfExists(Fields6, 37))
                            FilterFloatEntry F37;
                            
                        if (SeekToEntryIfExists(Fields6, 38))
                            FilterFloatEntry F38;
                            
                        if (SeekToEntryIfExists(Fields6, 39))
                            FilterFloatEntry F39;
                            
                        if (SeekToEntryIfExists(Fields6, 40))
                            FilterFloatEntry F40;
                            
                        if (SeekToEntryIfExists(Fields6, 41))
                            FilterBoolEntry F41;
                            
                        if (SeekToEntryIfExists(Fields6, 42))
                            FilterStringEntry F42;
                            
                        if (SeekToEntryIfExists(Fields6, 43))
                            FilterBoolEntry F43;
                            
                        if (SeekToEntryIfExists(Fields6, 44))
                            FilterBoolEntry F44;
                            
                        if (SeekToEntryIfExists(Fields6, 45))
                            FilterBoolEntry F45;
                            
                        if (SeekToEntryIfExists(Fields6, 46))
                            FilterBoolEntry F46;
                            
                        if (SeekToEntryIfExists(Fields6, 47))
                            Unk2xFloatStruct F47;
                            
                        if (SeekToEntryIfExists(Fields6, 48))
                            FilterFloatEntry F48;
                            
                        if (SeekToEntryIfExists(Fields6, 49))
                            FilterBoolEntry F49;
                            
                        if (SeekToEntryIfExists(Fields6, 50))
                            FilterBoolEntry F50;
                            
                        if (SeekToEntryIfExists(Fields6, 51))
                            FilterBoolEntry F51;
                            
                        if (SeekToEntryIfExists(Fields6, 52))
                            FilterFloatEntry F52;
                            
                        if (SeekToEntryIfExists(Fields6, 53))
                            FilterBoolEntry F53;
                            
                        if (SeekToEntryIfExists(Fields6, 54))
                            FilterFloatEntry F54;
                            
                        if (SeekToEntryIfExists(Fields6, 55))
                            FilterFloatEntry F55;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 56)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 11: // EventSubSequenceSkyCloudSdfSubtractionData or EventSubSequenceDeferredDecalData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe11 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterFloatEntry F1;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 2)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 12: // EventSubSequenceSkyCloudSdfSubtractionData or EventSubSequenceGroundSmokeData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe12 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            EventSubSequenceGroundSmokeData F1; // Always 2 entries
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterBoolEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterBoolEntry F3;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 4)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 13: // EventSubSequenceSkyCloudSdfSubtractionData or EventSubSequenceGroundSmokeData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe13 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterFloatEntry F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            Unk4xFloatStruct F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterFloatEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            Unk4xFloatStruct F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;
                        
                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 7)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 14: // EventSubSequenceGroundSmokeData or EventSubSequenceLocalIBLSceneObjectData
            break;
            
        case 15: // EventSubSequenceEffectEmitterObjectData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe14 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            Unk3xFloatStruct F1;
                        
                        if (SeekToEntryIfExists(Fields6, 2))
                            FilterFloatEntry F2;
                        
                        if (SeekToEntryIfExists(Fields6, 3))
                            FilterFloatEntry F3;
                            
                        if (SeekToEntryIfExists(Fields6, 4))
                            FilterFloatEntry F4;
                        
                        if (SeekToEntryIfExists(Fields6, 5))
                            FilterFloatEntry F5;

                        if (SeekToEntryIfExists(Fields6, 6))
                            FilterFloatEntry F6;
                        
                        if (SeekToEntryIfExists(Fields6, 7))
                            FilterFloatEntry F7;
                            
                        if (SeekToEntryIfExists(Fields6, 8))
                            Unk3xFloatStruct F8;
                            
                        if (SeekToEntryIfExists(Fields6, 9))
                            Unk3xFloatStruct F9;
                            
                        if (SeekToEntryIfExists(Fields6, 10))
                            Unk2xFloatStruct F10;
                            
                        if (SeekToEntryIfExists(Fields6, 11))
                            FilterFloatEntry F11;
                            
                        if (SeekToEntryIfExists(Fields6, 12))
                            FilterFloatEntry F12;
                            
                        if (SeekToEntryIfExists(Fields6, 13))
                            FilterFloatEntry F13;
                            
                        if (SeekToEntryIfExists(Fields6, 14))
                            Unk2xFloatStruct F14;
                            
                        if (SeekToEntryIfExists(Fields6, 15))
                            FilterFloatEntry F15;
                            
                        if (SeekToEntryIfExists(Fields6, 16))
                            FilterFloatEntry F16;
                            
                        if (SeekToEntryIfExists(Fields6, 17))
                            FilterFloatEntry F17;
                            
                        if (SeekToEntryIfExists(Fields6, 18))
                            FilterFloatEntry F18;
                            
                        if (SeekToEntryIfExists(Fields6, 19))
                            FilterFloatEntry F19;
                            
                        if (SeekToEntryIfExists(Fields6, 20))
                            FilterFloatEntry F20;
                            
                        if (SeekToEntryIfExists(Fields6, 21))
                            FilterFloatEntry F21;
                            
                        if (SeekToEntryIfExists(Fields6, 22))
                            FilterFloatEntry F22;
                            
                        if (SeekToEntryIfExists(Fields6, 23))
                            FilterBoolEntry F23;
                            
                        if (SeekToEntryIfExists(Fields6, 24))
                            FilterBoolEntry F24;
                            
                        if (SeekToEntryIfExists(Fields6, 25))
                            FilterBoolEntry F25;
                            
                        if (SeekToEntryIfExists(Fields6, 26))
                            FilterBoolEntry F26;
                            
                        if (SeekToEntryIfExists(Fields6, 27))
                            FilterBoolEntry F27;
                            
                        if (SeekToEntryIfExists(Fields6, 28))
                            FilterIntEntry F28;
                            
                        if (SeekToEntryIfExists(Fields6, 29))
                            FilterFloatEntry F29;
                            
                        //if (SeekToEntryIfExists(Fields6, 30))
                        //    FilterFloatEntry F30;
                            
                        if (SeekToEntryIfExists(Fields6, 31))
                            FilterBoolEntry F31;

                        //if (SeekToEntryIfExists(Fields6, 32))
                        //    Unk2xFloatStruct F32;
                            
                        if (SeekToEntryIfExists(Fields6, 33))
                            FilterFloatEntry F33;
                            
                        if (SeekToEntryIfExists(Fields6, 34))
                            FilterFloatEntry F34;

                        if (SeekToEntryIfExists(Fields6, 35))
                            FilterFloatEntry F35;
                            
                        if (SeekToEntryIfExists(Fields6, 36))
                            FilterFloatEntry F36;
                            
                        if (SeekToEntryIfExists(Fields6, 37))
                            FilterBoolEntry F37;
                            
                        if (SeekToEntryIfExists(Fields6, 38))
                            FilterFloatEntry F38;
                            
                        if (SeekToEntryIfExists(Fields6, 39))
                            FilterFloatEntry F39;
                            
                        if (SeekToEntryIfExists(Fields6, 40))
                            FilterFloatEntry F40;
                            
                        if (SeekToEntryIfExists(Fields6, 41))
                            FilterFloatEntry F41;
                            
                        if (SeekToEntryIfExists(Fields6, 42))
                            Unk4xFloatStruct F42;
                            
                        if (SeekToEntryIfExists(Fields6, 43))
                            Unk4xFloatStruct F43;
                            
                        if (SeekToEntryIfExists(Fields6, 44))
                            FilterFloatEntry F44;
                            
                        if (SeekToEntryIfExists(Fields6, 45))
                            Unk4xFloatStruct F45;
                            
                        if (SeekToEntryIfExists(Fields6, 46))
                            FilterFloatEntry F46;
                            
                        if (SeekToEntryIfExists(Fields6, 47))
                            Unk4xFloatStruct F47;
                            
                        if (SeekToEntryIfExists(Fields6, 48))
                            Unk4xFloatStruct F48;
                            
                        if (SeekToEntryIfExists(Fields6, 49))
                            Unk4xFloatStruct F49;
                            
                        if (SeekToEntryIfExists(Fields6, 50))
                            FilterIntEntry F50;
                            
                        if (SeekToEntryIfExists(Fields6, 51))
                            FilterFloatEntry F51;
                            
                        if (SeekToEntryIfExists(Fields6, 52))
                            FilterFloatEntry F52;
                            
                        if (SeekToEntryIfExists(Fields6, 53))
                            FilterFloatEntry F53;
                            
                        if (SeekToEntryIfExists(Fields6, 54))
                            FilterFloatEntry F54;
                            
                        if (SeekToEntryIfExists(Fields6, 55))
                            FilterBoolEntry F55;
                            
                        if (SeekToEntryIfExists(Fields6, 56))
                            Unk4xFloatStruct F56;
                            
                        if (SeekToEntryIfExists(Fields6, 57))
                            Unk4xFloatStruct F57;
                            
                        if (SeekToEntryIfExists(Fields6, 58))
                            FilterFloatEntry F58;
                            
                        if (SeekToEntryIfExists(Fields6, 59))
                            Unk4xFloatStruct F59;
                            
                        if (SeekToEntryIfExists(Fields6, 60))
                            Unk4xFloatStruct F60;
                            
                        if (SeekToEntryIfExists(Fields6, 61))
                            Unk4xFloatStruct F61;
                            
                        if (SeekToEntryIfExists(Fields6, 62))
                            Unk4xFloatStruct F62;
                            
                        if (SeekToEntryIfExists(Fields6, 63))
                            Unk4xFloatStruct F63;
                            
                        if (SeekToEntryIfExists(Fields6, 64))
                            Unk4xFloatStruct F64;
                            
                        if (SeekToEntryIfExists(Fields6, 65))
                            FilterFloatEntry F65;
                            
                        if (SeekToEntryIfExists(Fields6, 66))
                            FilterFloatEntry F66;
                            
                        if (SeekToEntryIfExists(Fields6, 67))
                            Unk4xFloatStruct F67;
                            
                        if (SeekToEntryIfExists(Fields6, 68))
                            Unk4xFloatStruct F68;
                            
                        if (SeekToEntryIfExists(Fields6, 69))
                            Unk3xFloatStruct F69;
                            
                        if (SeekToEntryIfExists(Fields6, 70))
                            FilterFloatEntry F70;
                            
                        // 71
                        
                        if (SeekToEntryIfExists(Fields6, 72))
                            Unk3xFloatStruct F72;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 73)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 16: // EventSubSequenceVolumeCloudData
            if (SeekToEntryIfExists(ObjectDataFields, 5))
                byte F5_MustBe15 <format=hex, bgcolor=cBlue>;
                
            if (SeekToEntryIfExists(ObjectDataFields, 6))
            {
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    struct
                    {
                        FlatArkFields Fields6;
                        
                        if (SeekToEntryIfExists(Fields6, 1))
                            FilterFloatEntry F1;
                            
                        if ((Fields6.OffsetTableSize / 2 - 1) > 2)
                            Printf("SceneObjectData Union Type %d Larger\n", F2_UnionType);
                    } Table;
                } F6;
            }
            break;
            
        case 17:
            break;
            
        default:
            Printf("Scene object data type %d not supported\n", F2_UnionType);
            break;
    }
    
        
} EventSubSequenceSceneObjectData;