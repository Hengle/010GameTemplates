//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: JPEGXL (Unfinished!)
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This is really unfinished, barely reads right even
// Was mostly used for GT7's JXL files  which appear to be a little bit different (or uses older/2020 libjxl)
// It seems libjxl doesn't really even follow the spec (ISO 18181) correctly
// as different commits between 2020-2024 would throw different reading errors for those jxls.

// We don't have access to said spec, it's under a paywall, 234 euros for the
// 2024 edition as time of writing. Awesome, thanks iso.org!

BigEndian();
BitfieldDisablePadding();
BitfieldRightToLeft();

/////////////////////////////
// EXIF
/////////////////////////////
local int exifOffset = 0;
typedef struct
{
    enum <ushort>
    {
        ExifOffset = 0x8769,
        PDIDate = 0xD00B,
        PDIExif = 0xD00C,
    } tag <format=hex>;
    
    enum <ushort>
    {
        format_ubyte = 1,
        format_string = 2,
        format_ushort = 3,
        format_ulong = 4,
        format_urational = 5,
        format_sbyte = 6,
        format_unknown = 7,
        format_short = 8,
        format_int = 9,
        format_rational = 10,
        format_float = 11,
        format_double = 12,
    } format;
    int numComponents;
    
    if (tag == 0xD00B)
        uint PDIDate <format=hex>;
    else
        int offset <format=hex>;
    
    if (tag == 0xD00C)
    {
        FSeek(startof(Exif) + offset);
        byte isEncrypted;
        byte Data[numComponents];
        
        FSeek(startof(offset) + 4);
    }
    
    if (tag == ExifOffset)
        exifOffset = offset;
} ExifTag <bgcolor=cDkGreen>;

typedef struct
{
    ushort numTags;
    
    local int i = 0;
    for (i = 0; i < numTags; i++)
    {
        ExifTag tag <bgcolor=cDkGreen>;
    }
    
    int nextIFD;
} IFD;

/////////////////////////////////
// JXL Encoded U32
/////////////////////////////////

typedef struct (int bits_, int offset_, int isDirect_)
{
    local int bits = bits_;
    local int offset = offset_;
    local int isDirect = isDirect_;
} BitsOffset;

typedef struct(BitsOffset& bit1, BitsOffset& bit2, BitsOffset& bit3, BitsOffset& bit4)
{
    int selector : 2; // reader->ReadFixedBits<2>();
    switch (selector) // enc.GetDistr(selector)
    {
        case 0: local BitsOffset d(bit1.bits, bit1.offset, bit1.isDirect); break;
        case 1: local BitsOffset d(bit2.bits, bit2.offset, bit2.isDirect); break;
        case 2: local BitsOffset d(bit3.bits, bit3.offset, bit3.isDirect); break;
        case 3: local BitsOffset d(bit4.bits, bit4.offset, bit4.isDirect); break;
    }
    
    local uint raw = ((d.bits - 1) & 0x1F) + ((d.offset & 0x3FFFFFF) << 5);
    if ((raw & 0x80000000u) != 0) // d.IsDirect()
        ; // d.Direct();
    else
        int extra : d.bits; // return reader->ReadBits(d.ExtraBits()) + d.Offset();
        
    local int value = GetU32CodedVal(this);
} U32Coded <read=PrintU32CodedVal>;

typedef struct
{
    local BitsOffset enum_1(0, 0, true);
    local BitsOffset enum_2(0, 1, true);
    local BitsOffset enum_3(4, 2, false);
    local BitsOffset enum_4(6, 18, false);
    U32Coded value(enum_1, enum_2, enum_3, enum_4);
} PackedEnumT;

typedef struct
{
    local BitsOffset enum_1(0, 0, true);
    local BitsOffset enum_2(4, 0, false);
    local BitsOffset enum_3(5, 16, false);
    local BitsOffset enum_4(10, 48, false);
    U32Coded name_length(enum_1, enum_2, enum_3, enum_4);
    
} PackedName;

uint GetU32CodedVal(U32Coded& coded)
{
    if (coded.d.isDirect) // d.IsDirect()
        return coded.d.offset & (0x80000000u - 1); // d.Direct()
    else
        return coded.extra + coded.d.offset; // return reader->ReadBits(d.ExtraBits()) + d.Offset();
}

string PrintU32CodedVal(U32Coded& coded)
{
    return Str("%d", coded.value);
}

/////////////////////////////////
// JXL Structs/Enums
/////////////////////////////////
            
typedef enum <int> {
  JXL_CHANNEL_ALPHA,
  JXL_CHANNEL_DEPTH,
  JXL_CHANNEL_SPOT_COLOR,
  JXL_CHANNEL_SELECTION_MASK,
  JXL_CHANNEL_BLACK,
  JXL_CHANNEL_CFA,
  JXL_CHANNEL_THERMAL,
  JXL_CHANNEL_RESERVED0,
  JXL_CHANNEL_RESERVED1,
  JXL_CHANNEL_RESERVED2,
  JXL_CHANNEL_RESERVED3,
  JXL_CHANNEL_RESERVED4,
  JXL_CHANNEL_RESERVED5,
  JXL_CHANNEL_RESERVED6,
  JXL_CHANNEL_RESERVED7,
  JXL_CHANNEL_UNKNOWN,
  JXL_CHANNEL_OPTIONAL
} JxlExtraChannelType;

typedef enum <uint> {
  // First two enumerators (most common) are cheaper to encode
  kAlpha = JXL_CHANNEL_ALPHA,
  kDepth = JXL_CHANNEL_DEPTH,

  kSpotColor = JXL_CHANNEL_SPOT_COLOR,
  kSelectionMask = JXL_CHANNEL_SELECTION_MASK,
  kBlack = JXL_CHANNEL_BLACK,  // for CMYK
  kCFA = JXL_CHANNEL_CFA,      // Bayer channel
  kThermal = JXL_CHANNEL_THERMAL,
  kReserved0 = JXL_CHANNEL_RESERVED0,
  kReserved1 = JXL_CHANNEL_RESERVED1,
  kReserved2 = JXL_CHANNEL_RESERVED2,
  kReserved3 = JXL_CHANNEL_RESERVED3,
  kReserved4 = JXL_CHANNEL_RESERVED4,
  kReserved5 = JXL_CHANNEL_RESERVED5,
  kReserved6 = JXL_CHANNEL_RESERVED6,
  kReserved7 = JXL_CHANNEL_RESERVED7,
  // disambiguated via name string, raise warning if unsupported
  kUnknown = JXL_CHANNEL_UNKNOWN,
  // like kUnknown but can silently be ignored
  kOptional = JXL_CHANNEL_OPTIONAL
} ExtraChannel;

typedef struct
{
    byte floating_point_sample : 1;
    if (!floating_point_sample)
    {
        local BitsOffset bps_1(0, 8, true);
        local BitsOffset bps_2(0, 10, true);
        local BitsOffset bps_3(0, 12, true);
        local BitsOffset bps_4(6, 1, false);
        U32Coded bits_per_sample(bps_1, bps_2, bps_3, bps_4);
    }
    else
    {
        local BitsOffset bps_1(0, 32, true);
        local BitsOffset bps_2(0, 16, true);
        local BitsOffset bps_3(0, 24, true);
        local BitsOffset bps_4(6, 1, false);
        U32Coded bits_per_sample(bps_1, bps_2, bps_3, bps_4);
    }
} BitDepth;
        
typedef struct
{
    byte Signature;
    byte CodestreamMarker;
    
    struct
    {
        byte small_ : 1;
        if (small_)
            byte ysize_div8_minus_1_ : 5;
            
        if (!small_)
        {
            local BitsOffset ysize_1(9, 1, false);
            local BitsOffset ysize_2(13, 1, false);
            local BitsOffset ysize_3(18, 1, false);
            local BitsOffset ysize_4(30, 1, false);
            U32Coded ysize_(ysize_1, ysize_2, ysize_3, ysize_4);
        }
            
        byte ratio : 3;
        
        if (ratio == 0 && small_)
            byte xsize_div8_minus_1_ : 5;
              
        if (ratio == 0 && !small_)
        {
            local BitsOffset xsize_1(9, 1, false);
            local BitsOffset xsize_2(13, 1, false);
            local BitsOffset xsize_3(18, 1, false);
            local BitsOffset xsize_4(30, 1, false);
            U32Coded xsize_(xsize_1, xsize_2, xsize_3, xsize_4);
        }
    } SizeHeader;
    
    struct
    {
        byte all_default : 1;
        if (!all_default)
        {
            byte extra_fields : 1;
            if (extra_fields)
            {
                byte orientation : 3;
                byte have_intrinsic_size : 1;
                if (have_intrinsic_size)
                {
                    // TODO
                }
                
                byte have_preview : 1;
                if (have_preview)
                {
                    struct
                    {
                        byte div8_ : 1;
                        if (div8_)
                        {
                            local BitsOffset ysize_div8_1(0, 16, true); // Val(16)
                            local BitsOffset ysize_div8_2(0, 32, true); // Val(32)
                            local BitsOffset ysize_div8_3(5, 1, false);
                            local BitsOffset ysize_div8_4(9, 33, false);
                            U32Coded ysize_div8_(ysize_div8_1, ysize_div8_2, ysize_div8_3, ysize_div8_4);
                        }
                        
                        if (!div8_)
                        {
                            local BitsOffset ysize_1(6, 1, false);
                            local BitsOffset ysize_2(8, 65, false);
                            local BitsOffset ysize_3(10, 321, false);
                            local BitsOffset ysize_4(12, 1345, false);
                            U32Coded ysize_(ysize_1, ysize_2, ysize_3, ysize_4);
                        }
                        
                        byte ratio_ : 3;
                        
                        if (ratio_ == 0 && div8_)
                        {
                            local BitsOffset xsize_div8_1(0, 16, true); // Val(16)
                            local BitsOffset xsize_div8_2(0, 32, true); // Val(32)
                            local BitsOffset xsize_div8_3(5, 1, false);
                            local BitsOffset xsize_div8_4(9, 33, false);
                            U32Coded xsize_div8_(xsize_div8_1, xsize_div8_2, xsize_div8_3, xsize_div8_4);
                        }
                        
                        if (ratio_ == 0 && !div8_)
                        {
                            local BitsOffset ysize_1(6, 1, false);
                            local BitsOffset ysize_2(8, 65, false);
                            local BitsOffset ysize_3(10, 321, false);
                            local BitsOffset ysize_4(12, 1345, false);
                            U32Coded xsize_(xsize_1, xsize_2, xsize_3, xsize_4);
                        }
                    } PreviewHeader;
                }
                
                byte have_animation : 1;
                if (have_animation)
                {
                    // TODO
                }
            }
            
            BitDepth bit_depth;
            
            byte modular_16_bit_buffer_sufficient : 1;
            
            local BitsOffset nec_1(0, 0, true);
            local BitsOffset nec_2(0, 1, true);
            local BitsOffset nec_3(4, 2, false);
            local BitsOffset nec_4(12,1, false);
            U32Coded num_extra_channels(nec_1, nec_2, nec_3, nec_4);
            
            local int i = 0;
            for (i = 0; i < GetU32CodedVal(num_extra_channels); i++)
            {
                struct
                {
                    byte all_default : 1;
                    if (!all_default)
                    {
                        PackedEnumT type; // ExtraChannel
                        BitDepth bit_depth;
                        
                        local BitsOffset dim1(0, 0, true);
                        local BitsOffset dim2(0, 3, true);
                        local BitsOffset dim3(0, 4, true);
                        local BitsOffset dim4(3, 1, false);
                        U32Coded dim_shift(dim1, dim2, dim3, dim4);
                        PackedName name; // TODO
                    }
                    
                } ExtraChannelInfo;
            }
        }
    } ImageMetadata;
} CodeStream;
         
///////////////////////////////////
// Main JXL
///////////////////////////////////                                           
struct
{
    while (!FEof())
    {
        struct
        {
            int BoxSize;
            int Magic <format=hex>; // typedef char JxlBoxType[4]
            
            union
            {
                byte Data[BoxSize - 8] <bgcolor=cBlue>;
                switch (Magic)
                {
                    case 0x6A786C63:
                        CodeStream codeStream_;
                        break;
                    case 0x65786966:
                        struct
                        {
                            local int isLittle = IsLittleEndian();
                            
                            LittleEndian();
                            if (ReadUInt() == 0x2A004D4D)
                                BigEndian();
                            else if (ReadUInt() == 0x002A4949)
                                LittleEndian();
                                
                            uint tag <format=hex>;
                            uint offset <format=hex>;
                            IFD main;
                            
                            FSeek(startof(this) + exifOffset);
                            IFD subDir;
                            isLittle ? LittleEndian() : BigEndian();
                        } Exif <bgcolor=cGreen>;
                }
            } BoxData;
            
        } Box <bgcolor=cPurple, read=Str("%c%c%c%c", Magic >> 24, Magic >> 16, Magic >> 8, Magic)>;
    }
} Header;