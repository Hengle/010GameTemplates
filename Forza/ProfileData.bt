//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: profiledata.bt
//   Authors: Das, Nenkai, merika, Doliman100
//   Version: 1.5 (FH3/4/5)
//   Purpose: decrypted savegame reading
//  Category: 
// File Mask: *.ProfileData
//  ID Bytes: B6 F2 8B 4A
//   History: 
//------------------------------------------------

typedef enum {
    Auto = 0,
    FH3,
    FH4,
    FH5
} Game;

local Game game = Auto; // edit me

LittleEndian();

local ubyte game_auto = false;
local ubyte game_is_weak = false;

// Utils
uint Hash(char name[], int toLower, uint seed)
{
    local int i = 0;
    for (i = 0; i < Strlen(name); i++)
    {
        seed ^= name[i] + (seed >> 2) + 32 * seed;
    }
    
    for (i = 0; i < Strlen(name); i++)
    {
        seed ^= name[i] + (seed >> 2) + 32 * seed;
    }
    
    return seed;
}

typedef struct {
    uint NameHash <fgcolor=cGreen, format=hex>;
    uint Size <format=hex>;
} SizeInHeader <bgcolor=cPurple>;

typedef ubyte Boolean <read=BooleanToString>;

string BooleanToString(uint value) {
    if (value == 1) {
        return "true";
    } else if (value == 0) {
        return "false";
    }
    local string s;
    SPrintf(s, "error (%d)", value);
    return s;
}

typedef struct
{
    int length;
    if (length > 0) {
        char data[length];
    } else {
        local string data = "<empty>";
    }
} String <read=data, write=0>;

typedef struct(uint color)
{
    int length;
    if (length > 0) {
        local uint c = color;
        char data[length] <bgcolor=c>;
    } else {
        local string data = "<empty>";
    }
} StringColored <read=data, write=0>;

typedef struct(uint color)
{
    int length;
    if (length > 0) {
        local uint c = color;
        wchar_t data[length] <bgcolor=c>;
    } else {
        local wstring data = "<empty>";
    }
} WStringColored <read=data, write=0>;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} DirectX_XMVECTOR <read=Str("%g %g %g %g", x, y, z, w)>;

typedef struct {
    uint64 data; // __int64
} Microseconds <read=Time64TToString(data / 1000000)>;

/////////////////////////////////////
// Binary States
/////////////////////////////////////

typedef struct
{
    int Version;
    int ListLength;
    int Values[ListLength];
} GenericIntegerList;

typedef struct
{
    int Version;
    byte BitArray[0x1000];
} RoadDiscoveryState;

typedef struct
{
    int Version;
    String PlayedMusic;
    String ActiveStation;
    String StationListenTime;
    
    int ArrSize;
    String Radios[ArrSize] <optimize=false>;
} RadioState;

typedef struct
{
    // not present - FH3
    // 1 - FH4, FH5
    int Version;
    DirectX_XMVECTOR StoredPlayerPosition; // DirectX::XMVECTOR m_PlayerPosition
    DirectX_XMVECTOR Unk1; // DirectX::XMVECTOR m_PlayerFacing;
    Boolean Unk3; // bool
    if (game == FH4) {
        Boolean Unk7; // bool
        Boolean Unk8; // bool
    }
    String Unk4; // std::string
    String Unk5; // std::string
    int Unk6; // int
    
    uint ArrLen; // unsigned long Size;
    int Unk[ArrLen]; // int; name: "Value%d"
    
    if (Version == 1) {
        uint ArrLen2; // ReadData(4)
        if (ArrLen2 > 0)
        {
           struct
           {
               int UnkValue; // int
               String UnkStr; // std::string
           } UnkEntry[ArrLen2] <optimize=false>;
        }
    }
} PlayerState; // class SaveStates::PlayerState

typedef struct
{
    int Version;
    int SkillPointsTotal;
    int UnspentSkillPointsTotal;
    int CurrentSkillTokensTotal;
    byte SeenCarMasteriesScreen;
    int BestSkillsCombo;
    
    int CarPerksPerCarDataCount;
    struct
    {
        int CarID;
        byte UnkByte;
        
        int PerkCount;
        
        if (PerkCount > 0)
        {
            struct
            {
                int PerkID;
                
                int Unk;
                byte Unk2;
            } PerkData[PerkCount] <optimize=false>;
        }
    } CarPerksPerCarData[CarPerksPerCarDataCount] <optimize=false>;
    
    if (Version >= 2)
    {
        byte V2_1;
        uint V2_2;
        byte V2_3;
    }
    
    if (Version >= 3)
    {
        int V3_UnkArrLen;
        
        struct
        {
            int ID;
            uint Unk;
        } V3Data[V3_UnkArrLen];
    }
    
    if (Version >= 4)
    {
        uint V4_Unk;
    }
} CarPerkSaveState;

struct Stat;
struct Stat // class Stats::Stat
{
    if (game == FH5) {
        uint64 Guid <format=hex>; // unsigned __int64 guid;
    } else { // FH3, FH4
        // id
        Boolean valid; // bool valid;
        if (valid) {
            Boolean anon; // bool anon;
            uint crc <format=hex>; // unsigned long crc;
            String name; // std::string name;
        }
    }
    
    String value; // std::string
    
    if (Version >= 2)
    {
        int Children; // int children;
        if (Children > 0) {
            Stat stat[Children] <optimize=false>;
        }
    }
};

typedef struct
{
    // 1 - FH3
    // 2 - FH4, FH5
    int Version; // int
    int StatCount; // int stat_count;
    
    Stat stats[StatCount] <optimize=false>;
} StatsSaveState;

// Guid Calculation (speculation from a random piece of code)

/* FH5 Code (13-09-2022 Steam Exe)
    v102 = sub_142CB2F70("MyProfile") << 32; also DrivatarStats, probably many more
    v103 = sub_142CB2F70("IDS_Stat_PlayerBusinessesOwned");
    final = v102 | v103;
    
    // Generation:
    uint __fastcall sub_142CB2F70(char *str)
    {
      int v2; // [rsp+30h] [rbp+8h] BYREF
    
      if ( *str )
        return *sub_140946740(&v2, str + 1, __ROL4__(~*str, 7));
      else
        return -1;
    }
    
    _DWORD *__fastcall sub_140946740(_DWORD *a1, _BYTE *a2, int a3)
    {
      int v4; // ecx
      _DWORD *result; // rax
      int v6; // [rsp+30h] [rbp+8h] BYREF
    
      if ( *a2 )
      {
        v4 = *sub_140946740(&v6, a2 + 1, __ROL4__(a3 ^ (char)*a2, 7));
        result = a1;
        *a1 = v4;
      }
      else
      {
        *a1 = a3;
        return a1;
      }
      return result;
    }
*/
typedef struct
{
    int Version;
    int Unk;
    int Unk2;
} VIPSuperWheelspinsSaveState;

typedef struct
{
    int Version;
    int Unk;
} PerkPeriodicWheelspinSaveState;

typedef struct
{
    // not present - FH3, FH4
    // 0 - FH5
    int Version;
    uint Count; // ReadData(4)
    struct
    {
        uint Id; // unsigned long
        
        // struct SaveStates::ChallengeSaveData
        uint Unk; // unsigned long
        uint Unk2; // unsigned long
        int Unk3; // int
        
        uint size; // unsigned long Size;
        struct
        {
            uint Value; // unsigned long
            Boolean Unk; // bool
            
            String Type; // std::string
            String Value; // std::string
        } Values[size] <optimize=false>; // name: "Value%d"
        
        Boolean Unk; // bool
        uint Unk; // unsigned long
        uint Unk; // unsigned long
        uint Unk; // unsigned long
        Microseconds UnlockTimestamp; // __int64
        uint Unk; // unsigned long
    } ChallengeSaveData[Count] <optimize=false>;
    
    //uint UnkCount;
    //uint UnkArr[UnkCount];
} ChallengeSaveDataBase; // class SaveStates::ChallengeSaveState<SaveStates::ChallengeSaveData>

typedef struct
{
    ChallengeSaveDataBase DataBase;
    int Unk; // int
    String Unk; // std::string
} CollectiblesChallengeSaveState;

typedef struct
{
    ChallengeSaveDataBase DataBase;
    uint UnkCount;
    uint UnkArray[UnkCount];
} BadgeChallengeSaveState;

typedef struct
{
    ChallengeSaveDataBase DataBase;
    uint Unk;
} HorizonOpenChallengeSaveState;

typedef struct
{
    ChallengeSaveDataBase DataBase;
    
    int UnkPhotoDataGroupSize;
    struct
    {
        uint ID;
        
        int unkSize;
        struct
        {
            uint ID;
            uint Unk;
        } UnkPhotoData[unkSize] <optimize=false>;
    } UnkPhotoDataGroup[UnkPhotoDataGroupSize] <optimize=false>;
    
    byte Unk;
    int Unk2;
    int Size;
    int UnkArray[Size];
} PhotoChallengeSaveState;

/////////////////////////////////////////////
typedef enum <int> {
    CVariant_Invalid = -1, // CVariant::Invalid
    CVariant_Bool = 0,
    CVariant_UInt8 = 1,
    CVariant_UInt16 = 2,
    CVariant_UInt32 = 3,
    CVariant_UInt64 = 4,
    CVariant_Int8 = 5,
    CVariant_Int16 = 6,
    CVariant_Int32 = 7,
    CVariant_Int64 = 8,
    CVariant_Float32 = 9,
    CVariant_Float64 = 10,
    CVariant_StringNarrow = 11,
    CVariant_StringWide = 12,
    CVariant_Matrix = 13,
    CVariant_Vector = 14,
    CVariant_PropertyBag = 15,
    CVariant_DatabasePropertyBag = 16,
    CVariant_U32_Obfuscated = 17
} CVariant_Enum; // CVariant::Enum; 14446CAB0

struct CPropertyBag;
typedef struct {
    uint length; // unsigned long
    
    local int i;
    for (i = 0; i < length; i++) {
        struct {
            // class CHashName; CHashName::HashFunc()
            ubyte CaseSensitive; // unsigned char CaseSensitive;
            int NumBits; // long NumBits;
            StringColored Name(0xFFBBBB); // std::string Name; cs_MaxNameLength = 64
            
            // class CVariant
            CVariant_Enum type; // long m_eType; SetType(); possible name: type, eType
            switch (type) {
            case CVariant_Bool:
                Boolean value <bgcolor=0xFFFF99>; // bool value;
                break;
            case CVariant_UInt8:
                ubyte value <bgcolor=0xFFFF99>; // unsigned char
                break;
            //case CVariant_UInt16:
            //    // unsigned short
            //    break;
            case CVariant_UInt32:
            case CVariant_U32_Obfuscated:
                uint value <bgcolor=0xFFFF99>; // unsigned long
                break;
            case CVariant_UInt64:
                uint64 value <bgcolor=0xFFFF99>; // unsigned __int64
                break;
            //case CVariant_Int8:
            //    // char
            //    break;
            //case CVariant_Int16:
            //    // short
            //    break;
            case CVariant_Int32:
                int value <bgcolor=0xFFFF99>; // long
                break;
            //case CVariant_Int64:
            //    // __int64
            //    break;
            case CVariant_Float32:
                float value <bgcolor=0xFFFF99>; // float
                break;
            //case CVariant_Float64:
            //    // double
            //    break;
            case CVariant_StringNarrow:
                StringColored value(0xFFFF99); // std::string
                break;
            case CVariant_StringWide:
                WStringColored value(0xFFFF99); // std::wstring
                break;
            //case CVariant_Matrix:
            //    // DirectX::XMMATRIX
            //    break;
            //case CVariant_Vector:
            //    // DirectX::XMVECTOR
            //    break;
            case CVariant_PropertyBag:
                CPropertyBag value; // CPropertyBag
                break;
            //case CVariant_DatabasePropertyBag:
            //    // CDatabasePropertyBag
            //    break;
            default:
                Printf("Error: Unknown CVariant.m_eType: %d\n", type);
                break;
            }
            
            // heuristic
            if (game_is_weak) {
                if (Name.data == "HDRSaturation") {
                    game = FH5;
                    game_is_weak = false;
                } else if (game == FH3 && Name.data == "HDRWhitePoint") {
                    game = FH4;
                }
            }
        } property <read=Name.data>; // std::map<CHashName, CVariant>
    }
} CPropertyBag; // class CPropertyBag

////////////////////////////////////////////////
// Main Bulk
////////////////////////////////////////////////
const int PROFILE_HASH_SEED = 0x1505;

const char PROFILE_OPTIONS_NAME[] = "profile";
const char SAVESTATE_NAME[] = "savestate";
const char BINARY_STATE_NAME[] = "binary";
const char DATABASE_NAME[] = "database";

SizeInHeader ProfileOptionsHeader;
if (ProfileOptionsHeader.NameHash != Hash(PROFILE_OPTIONS_NAME, 0, PROFILE_HASH_SEED))
    Printf("WARNING: 'profile' header hash did not match 0x%x!\n", Hash(PROFILE_OPTIONS_NAME, 0, PROFILE_HASH_SEED));
else
    Printf("OK: 'profile' header hash 0x%x matches\n", ProfileOptionsHeader.NameHash);

if (game == Auto) {
    game = FH3;
    game_auto = true;
    game_is_weak = true;
}

union
{
    struct {
        CPropertyBag property_bag;
        struct {
            uint length; // unsigned long
            uint unk[length] <format=hex>; // unsigned long; std::set<CHashName>
        } unk[2] <optimize=false>;
    } ProfileOptionsEntity;
    byte ProfileOptionsData[ProfileOptionsHeader.Size];
} ProfileOptions;

if (game_auto) {
    if (game == FH5) {
        Printf("Assumed game: Forza Horizon 5\n");
    } else if (game == FH4) {
        Printf("Assumed game: Forza Horizon 4\n");
    } else {
        Printf("Assumed game: Forza Horizon 3\n");
    }
}

SizeInHeader SaveStateHeader;
if (SaveStateHeader.NameHash != Hash(SAVESTATE_NAME, 0, PROFILE_HASH_SEED))
    Printf("WARNING: 'savestate' header hash did not match 0x%x!\n", Hash(SAVESTATE_NAME, 0, PROFILE_HASH_SEED));
else
    Printf("OK: 'savestate' header hash 0x%x matches\n", SaveStateHeader.NameHash);

union
{
    byte SaveStateData[SaveStateHeader.Size];
} SaveState;

SizeInHeader BinaryStateHeader;
if (BinaryStateHeader.NameHash != Hash(BINARY_STATE_NAME, 0, PROFILE_HASH_SEED))
    Printf("WARNING: 'binary' header hash did not match 0x%x!\n", Hash(BINARY_STATE_NAME, 0, PROFILE_HASH_SEED));
else
    Printf("OK: 'binary' header hash 0x%x matches\n", BinaryStateHeader.NameHash);


Printf("--------------------------\n");
union
{
    struct
    {
        int StateCount; // int
        
        if (game == FH5) {
            union 
            {
                uint64 XUID <format=hex>; // unsigned __int64
                
                BigEndian();
                uint64 XUID_ <format=hex>;
                LittleEndian();
            } ProfileXUID;
        }
        
        struct
        {
            String Name; // std::string
            String Type; // std::string
            
            SizeInHeader DataHeader; // IOSys::CSizeInHeaderStream
            if (DataHeader.NameHash != Hash(Name.data + Type.data, 0, PROFILE_HASH_SEED))
                Printf("WARNING: '%s' does not match expected hash of 0x%x", Name.data + Type.data, DataHeader.NameHash);
            else
                Printf("OK: '%s' state hash is correct\n", Name.data + Type.data);
            
            union
            {
                // Data is custom read depending on the Type
                // Refer to <Name>@SaveStates->vtable->0x0C for deserialization. i.e PlaythroughState@SaveState
                // most calls will be stream calls i.e ReadInt32 etc
                
                // Always starts with an int as the version
                // Providing a fair few examples as a start varying from less to more complex
                
                // Also, version is always part of any state, but since we're in a union
                // I defined it in each state structure
                switch (Type.data)
                {
                    case "GenericIntegerList":
                        GenericIntegerList State; break;
                    case "RoadDiscoveryState":
                        RoadDiscoveryState State; break;
                    case "RadioState":
                        RadioState State; break;
                    case "PlayerState":
                        PlayerState State; break;
                    case "CarPerkSaveState":
                        CarPerkSaveState State; break;
                    case "ChallengeSaveDataBase": // Some have extra data on-top for this
                        switch (Name.data)
                        {
                            case "CollectiblesChallengeSaveState":
                                CollectiblesChallengeSaveState State; break;
                            case "BadgeChallengeSaveState":
                                BadgeChallengeSaveState State; break;
                            case "HorizonOpenChallengeSaveState":
                                HorizonOpenChallengeSaveState State; break;
                            case "PhotoChallengeSaveState":
                                PhotoChallengeSaveState State; break;
                            default:
                                ChallengeSaveDataBase State; break;
                        }
                        break;
                    case "StatsSaveState":
                        StatsSaveState State; break;
                    case "VIPSuperWheelspinsSaveState":
                        VIPSuperWheelspinsSaveState State; break;
                    case "PerkPeriodicWheelspinSaveState":
                        PerkPeriodicWheelspinSaveState State; break;
                }
                byte StateData[DataHeader.Size];
            } Data;
            int Index; // int
         } State[StateCount] <comment=Name.data, optimize=false>;
    } BinaryStateEntity;
    byte BinaryStateData[BinaryStateHeader.Size];
} BinaryState;
Printf("--------------------------\n");

SizeInHeader DatabaseHeader;
if (DatabaseHeader.NameHash != Hash(DATABASE_NAME, 0, PROFILE_HASH_SEED))
    Printf("WARNING: 'database' header hash did not match 0x%x!\n", Hash(DATABASE_NAME, 0, PROFILE_HASH_SEED));
else
    Printf("OK: 'database' header hash 0x%x matches\n", DatabaseHeader.NameHash);

union
{
    byte DatabaseData[DatabaseHeader.Size];
} Database;

if (game == FH5) {
    Printf("--------------------------\n");
    Printf("Profile XUID: %LX", BinaryState.BinaryStateEntity.ProfileXUID.XUID);
}
